<?php
/**
 * NewCampaign
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewCampaign Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewCampaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'newCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'user_id' => 'float',
        'iab_category' => 'string[]',
        'time_zone' => 'float',
        'active' => 'float',
        'is_unlimited_budget' => 'float',
        'daily_budget_is_unlimited' => 'float',
        'daily_budget' => 'float',
        'frequency_cap' => 'float',
        'frequency_cap_type' => 'float',
        'frequency_cap_period' => 'float',
        'macros_custom_data' => 'string',
        'attribution_enabled' => 'float',
        'conversion_pixel_id' => 'float',
        'pixel_events_repeat' => 'float',
        'pixel_events_repeat_time' => 'float',
        'pixel_events_repeat_period' => 'float',
        'post_click_window_enabled' => 'float',
        'post_click_window_period' => 'float',
        'post_click_window' => 'float',
        'post_view_window_enabled' => 'float',
        'post_view_window_period' => 'float',
        'post_view_window' => 'float',
        'ssp_test_phase' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'user_id' => null,
        'iab_category' => null,
        'time_zone' => null,
        'active' => null,
        'is_unlimited_budget' => null,
        'daily_budget_is_unlimited' => null,
        'daily_budget' => null,
        'frequency_cap' => null,
        'frequency_cap_type' => null,
        'frequency_cap_period' => null,
        'macros_custom_data' => null,
        'attribution_enabled' => null,
        'conversion_pixel_id' => null,
        'pixel_events_repeat' => null,
        'pixel_events_repeat_time' => null,
        'pixel_events_repeat_period' => null,
        'post_click_window_enabled' => null,
        'post_click_window_period' => null,
        'post_click_window' => null,
        'post_view_window_enabled' => null,
        'post_view_window_period' => null,
        'post_view_window' => null,
        'ssp_test_phase' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'user_id' => 'user_id',
        'iab_category' => 'iab_category',
        'time_zone' => 'time_zone',
        'active' => 'active',
        'is_unlimited_budget' => 'is_unlimited_budget',
        'daily_budget_is_unlimited' => 'daily_budget_is_unlimited',
        'daily_budget' => 'daily_budget',
        'frequency_cap' => 'frequency_cap',
        'frequency_cap_type' => 'frequency_cap_type',
        'frequency_cap_period' => 'frequency_cap_period',
        'macros_custom_data' => 'macros_custom_data',
        'attribution_enabled' => 'attribution_enabled',
        'conversion_pixel_id' => 'conversion_pixel_id',
        'pixel_events_repeat' => 'pixel_events_repeat',
        'pixel_events_repeat_time' => 'pixel_events_repeat_time',
        'pixel_events_repeat_period' => 'pixel_events_repeat_period',
        'post_click_window_enabled' => 'post_click_window_enabled',
        'post_click_window_period' => 'post_click_window_period',
        'post_click_window' => 'post_click_window',
        'post_view_window_enabled' => 'post_view_window_enabled',
        'post_view_window_period' => 'post_view_window_period',
        'post_view_window' => 'post_view_window',
        'ssp_test_phase' => 'ssp_test_phase'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'user_id' => 'setUserId',
        'iab_category' => 'setIabCategory',
        'time_zone' => 'setTimeZone',
        'active' => 'setActive',
        'is_unlimited_budget' => 'setIsUnlimitedBudget',
        'daily_budget_is_unlimited' => 'setDailyBudgetIsUnlimited',
        'daily_budget' => 'setDailyBudget',
        'frequency_cap' => 'setFrequencyCap',
        'frequency_cap_type' => 'setFrequencyCapType',
        'frequency_cap_period' => 'setFrequencyCapPeriod',
        'macros_custom_data' => 'setMacrosCustomData',
        'attribution_enabled' => 'setAttributionEnabled',
        'conversion_pixel_id' => 'setConversionPixelId',
        'pixel_events_repeat' => 'setPixelEventsRepeat',
        'pixel_events_repeat_time' => 'setPixelEventsRepeatTime',
        'pixel_events_repeat_period' => 'setPixelEventsRepeatPeriod',
        'post_click_window_enabled' => 'setPostClickWindowEnabled',
        'post_click_window_period' => 'setPostClickWindowPeriod',
        'post_click_window' => 'setPostClickWindow',
        'post_view_window_enabled' => 'setPostViewWindowEnabled',
        'post_view_window_period' => 'setPostViewWindowPeriod',
        'post_view_window' => 'setPostViewWindow',
        'ssp_test_phase' => 'setSspTestPhase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'user_id' => 'getUserId',
        'iab_category' => 'getIabCategory',
        'time_zone' => 'getTimeZone',
        'active' => 'getActive',
        'is_unlimited_budget' => 'getIsUnlimitedBudget',
        'daily_budget_is_unlimited' => 'getDailyBudgetIsUnlimited',
        'daily_budget' => 'getDailyBudget',
        'frequency_cap' => 'getFrequencyCap',
        'frequency_cap_type' => 'getFrequencyCapType',
        'frequency_cap_period' => 'getFrequencyCapPeriod',
        'macros_custom_data' => 'getMacrosCustomData',
        'attribution_enabled' => 'getAttributionEnabled',
        'conversion_pixel_id' => 'getConversionPixelId',
        'pixel_events_repeat' => 'getPixelEventsRepeat',
        'pixel_events_repeat_time' => 'getPixelEventsRepeatTime',
        'pixel_events_repeat_period' => 'getPixelEventsRepeatPeriod',
        'post_click_window_enabled' => 'getPostClickWindowEnabled',
        'post_click_window_period' => 'getPostClickWindowPeriod',
        'post_click_window' => 'getPostClickWindow',
        'post_view_window_enabled' => 'getPostViewWindowEnabled',
        'post_view_window_period' => 'getPostViewWindowPeriod',
        'post_view_window' => 'getPostViewWindow',
        'ssp_test_phase' => 'getSspTestPhase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['iab_category'] = isset($data['iab_category']) ? $data['iab_category'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['is_unlimited_budget'] = isset($data['is_unlimited_budget']) ? $data['is_unlimited_budget'] : null;
        $this->container['daily_budget_is_unlimited'] = isset($data['daily_budget_is_unlimited']) ? $data['daily_budget_is_unlimited'] : null;
        $this->container['daily_budget'] = isset($data['daily_budget']) ? $data['daily_budget'] : null;
        $this->container['frequency_cap'] = isset($data['frequency_cap']) ? $data['frequency_cap'] : null;
        $this->container['frequency_cap_type'] = isset($data['frequency_cap_type']) ? $data['frequency_cap_type'] : null;
        $this->container['frequency_cap_period'] = isset($data['frequency_cap_period']) ? $data['frequency_cap_period'] : null;
        $this->container['macros_custom_data'] = isset($data['macros_custom_data']) ? $data['macros_custom_data'] : null;
        $this->container['attribution_enabled'] = isset($data['attribution_enabled']) ? $data['attribution_enabled'] : null;
        $this->container['conversion_pixel_id'] = isset($data['conversion_pixel_id']) ? $data['conversion_pixel_id'] : null;
        $this->container['pixel_events_repeat'] = isset($data['pixel_events_repeat']) ? $data['pixel_events_repeat'] : null;
        $this->container['pixel_events_repeat_time'] = isset($data['pixel_events_repeat_time']) ? $data['pixel_events_repeat_time'] : null;
        $this->container['pixel_events_repeat_period'] = isset($data['pixel_events_repeat_period']) ? $data['pixel_events_repeat_period'] : null;
        $this->container['post_click_window_enabled'] = isset($data['post_click_window_enabled']) ? $data['post_click_window_enabled'] : null;
        $this->container['post_click_window_period'] = isset($data['post_click_window_period']) ? $data['post_click_window_period'] : null;
        $this->container['post_click_window'] = isset($data['post_click_window']) ? $data['post_click_window'] : null;
        $this->container['post_view_window_enabled'] = isset($data['post_view_window_enabled']) ? $data['post_view_window_enabled'] : null;
        $this->container['post_view_window_period'] = isset($data['post_view_window_period']) ? $data['post_view_window_period'] : null;
        $this->container['post_view_window'] = isset($data['post_view_window']) ? $data['post_view_window'] : null;
        $this->container['ssp_test_phase'] = isset($data['ssp_test_phase']) ? $data['ssp_test_phase'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['iab_category'] === null) {
            $invalidProperties[] = "'iab_category' can't be null";
        }
        if ($this->container['time_zone'] === null) {
            $invalidProperties[] = "'time_zone' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['is_unlimited_budget'] === null) {
            $invalidProperties[] = "'is_unlimited_budget' can't be null";
        }
        if ($this->container['daily_budget_is_unlimited'] === null) {
            $invalidProperties[] = "'daily_budget_is_unlimited' can't be null";
        }
        if (!is_null($this->container['daily_budget']) && ($this->container['daily_budget'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'daily_budget', must be bigger than or equal to 0.01.";
        }

        if ($this->container['frequency_cap'] === null) {
            $invalidProperties[] = "'frequency_cap' can't be null";
        }
        if (($this->container['frequency_cap'] < 0)) {
            $invalidProperties[] = "invalid value for 'frequency_cap', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['macros_custom_data']) && (mb_strlen($this->container['macros_custom_data']) > 500)) {
            $invalidProperties[] = "invalid value for 'macros_custom_data', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['pixel_events_repeat_time']) && ($this->container['pixel_events_repeat_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'pixel_events_repeat_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['post_click_window']) && ($this->container['post_click_window'] < 1)) {
            $invalidProperties[] = "invalid value for 'post_click_window', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['post_view_window']) && ($this->container['post_view_window'] < 1)) {
            $invalidProperties[] = "invalid value for 'post_view_window', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id Advertiser.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets iab_category
     *
     * @return string[]
     */
    public function getIabCategory()
    {
        return $this->container['iab_category'];
    }

    /**
     * Sets iab_category
     *
     * @param string[] $iab_category IAB Category. Required. ID values of parameter `iab_categories` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setIabCategory($iab_category)
    {
        $this->container['iab_category'] = $iab_category;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return float
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param float $time_zone Time Zone. One of the ID values of parameter `time_zones` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets active
     *
     * @return float
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param float $active Status. 1 - Active, 0 - Pause. One of the ID values of parameter `statuses` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets is_unlimited_budget
     *
     * @return float
     */
    public function getIsUnlimitedBudget()
    {
        return $this->container['is_unlimited_budget'];
    }

    /**
     * Sets is_unlimited_budget
     *
     * @param float $is_unlimited_budget Budget Flights. 1 - Unlimited, 0 - Use Flights.
     *
     * @return $this
     */
    public function setIsUnlimitedBudget($is_unlimited_budget)
    {
        $this->container['is_unlimited_budget'] = $is_unlimited_budget;

        return $this;
    }

    /**
     * Gets daily_budget_is_unlimited
     *
     * @return float
     */
    public function getDailyBudgetIsUnlimited()
    {
        return $this->container['daily_budget_is_unlimited'];
    }

    /**
     * Sets daily_budget_is_unlimited
     *
     * @param float $daily_budget_is_unlimited Daily Spend Cap. 1 - Unlimited, 0 - Use daily_budget.
     *
     * @return $this
     */
    public function setDailyBudgetIsUnlimited($daily_budget_is_unlimited)
    {
        $this->container['daily_budget_is_unlimited'] = $daily_budget_is_unlimited;

        return $this;
    }

    /**
     * Gets daily_budget
     *
     * @return float|null
     */
    public function getDailyBudget()
    {
        return $this->container['daily_budget'];
    }

    /**
     * Sets daily_budget
     *
     * @param float|null $daily_budget If daily_budget_is_unlimited = 0 - Required.
     *
     * @return $this
     */
    public function setDailyBudget($daily_budget)
    {


        $this->container['daily_budget'] = $daily_budget;

        return $this;
    }

    /**
     * Gets frequency_cap
     *
     * @return float
     */
    public function getFrequencyCap()
    {
        return $this->container['frequency_cap'];
    }

    /**
     * Sets frequency_cap
     *
     * @param float $frequency_cap Required.
     *
     * @return $this
     */
    public function setFrequencyCap($frequency_cap)
    {


        $this->container['frequency_cap'] = $frequency_cap;

        return $this;
    }

    /**
     * Gets frequency_cap_type
     *
     * @return float|null
     */
    public function getFrequencyCapType()
    {
        return $this->container['frequency_cap_type'];
    }

    /**
     * Sets frequency_cap_type
     *
     * @param float|null $frequency_cap_type Conversion Event Pixel. If frequency_cap > 0 - Required. One of the ID values of parameter `frequency_cap_types` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setFrequencyCapType($frequency_cap_type)
    {
        $this->container['frequency_cap_type'] = $frequency_cap_type;

        return $this;
    }

    /**
     * Gets frequency_cap_period
     *
     * @return float|null
     */
    public function getFrequencyCapPeriod()
    {
        return $this->container['frequency_cap_period'];
    }

    /**
     * Sets frequency_cap_period
     *
     * @param float|null $frequency_cap_period Conversion Event Pixel. If frequency_cap > 0 - Required. One of the ID values of parameter `frequency_cap_periods` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setFrequencyCapPeriod($frequency_cap_period)
    {
        $this->container['frequency_cap_period'] = $frequency_cap_period;

        return $this;
    }

    /**
     * Gets macros_custom_data
     *
     * @return string|null
     */
    public function getMacrosCustomData()
    {
        return $this->container['macros_custom_data'];
    }

    /**
     * Sets macros_custom_data
     *
     * @param string|null $macros_custom_data You can pass this data upon impression using the [CAMPAIGN_CUSTOM_DATA] macro.
     *
     * @return $this
     */
    public function setMacrosCustomData($macros_custom_data)
    {
        if (!is_null($macros_custom_data) && (mb_strlen($macros_custom_data) > 500)) {
            throw new \InvalidArgumentException('invalid length for $macros_custom_data when calling NewCampaign., must be smaller than or equal to 500.');
        }

        $this->container['macros_custom_data'] = $macros_custom_data;

        return $this;
    }

    /**
     * Gets attribution_enabled
     *
     * @return float|null
     */
    public function getAttributionEnabled()
    {
        return $this->container['attribution_enabled'];
    }

    /**
     * Sets attribution_enabled
     *
     * @param float|null $attribution_enabled Attribution & tracking. 1 - Use Attribution & tracking, 0 - Not use.
     *
     * @return $this
     */
    public function setAttributionEnabled($attribution_enabled)
    {
        $this->container['attribution_enabled'] = $attribution_enabled;

        return $this;
    }

    /**
     * Gets conversion_pixel_id
     *
     * @return float|null
     */
    public function getConversionPixelId()
    {
        return $this->container['conversion_pixel_id'];
    }

    /**
     * Sets conversion_pixel_id
     *
     * @param float|null $conversion_pixel_id One Of the Conversion Pixel. One of the ID values in pixels this campaign user.
     *
     * @return $this
     */
    public function setConversionPixelId($conversion_pixel_id)
    {
        $this->container['conversion_pixel_id'] = $conversion_pixel_id;

        return $this;
    }

    /**
     * Gets pixel_events_repeat
     *
     * @return float|null
     */
    public function getPixelEventsRepeat()
    {
        return $this->container['pixel_events_repeat'];
    }

    /**
     * Sets pixel_events_repeat
     *
     * @param float|null $pixel_events_repeat Repeat Conversion Events. If Use Attribution & tracking - Required. One of the ID values of parameter `pixel_events_repeats` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setPixelEventsRepeat($pixel_events_repeat)
    {
        $this->container['pixel_events_repeat'] = $pixel_events_repeat;

        return $this;
    }

    /**
     * Gets pixel_events_repeat_time
     *
     * @return float|null
     */
    public function getPixelEventsRepeatTime()
    {
        return $this->container['pixel_events_repeat_time'];
    }

    /**
     * Sets pixel_events_repeat_time
     *
     * @param float|null $pixel_events_repeat_time If Use Attribution & tracking and pixel_events_repeat = 1 - Required.
     *
     * @return $this
     */
    public function setPixelEventsRepeatTime($pixel_events_repeat_time)
    {


        $this->container['pixel_events_repeat_time'] = $pixel_events_repeat_time;

        return $this;
    }

    /**
     * Gets pixel_events_repeat_period
     *
     * @return float|null
     */
    public function getPixelEventsRepeatPeriod()
    {
        return $this->container['pixel_events_repeat_period'];
    }

    /**
     * Sets pixel_events_repeat_period
     *
     * @param float|null $pixel_events_repeat_period If Use Attribution & tracking and pixel_events_repeat = 1 - Required. One of the ID values of parameter `repeat_merit_event_periods` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setPixelEventsRepeatPeriod($pixel_events_repeat_period)
    {
        $this->container['pixel_events_repeat_period'] = $pixel_events_repeat_period;

        return $this;
    }

    /**
     * Gets post_click_window_enabled
     *
     * @return float|null
     */
    public function getPostClickWindowEnabled()
    {
        return $this->container['post_click_window_enabled'];
    }

    /**
     * Sets post_click_window_enabled
     *
     * @param float|null $post_click_window_enabled Post-Click Conversion Interval. If Use Attribution & tracking - Required.
     *
     * @return $this
     */
    public function setPostClickWindowEnabled($post_click_window_enabled)
    {
        $this->container['post_click_window_enabled'] = $post_click_window_enabled;

        return $this;
    }

    /**
     * Gets post_click_window_period
     *
     * @return float|null
     */
    public function getPostClickWindowPeriod()
    {
        return $this->container['post_click_window_period'];
    }

    /**
     * Sets post_click_window_period
     *
     * @param float|null $post_click_window_period Interval. If Use Attribution & tracking and post_click_window_enabled = 1 - Required. One of the ID values of parameter `post_window_intervals` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setPostClickWindowPeriod($post_click_window_period)
    {
        $this->container['post_click_window_period'] = $post_click_window_period;

        return $this;
    }

    /**
     * Gets post_click_window
     *
     * @return float|null
     */
    public function getPostClickWindow()
    {
        return $this->container['post_click_window'];
    }

    /**
     * Sets post_click_window
     *
     * @param float|null $post_click_window Number. If Use Attribution & tracking and post_click_window_enabled = 1 - Required.
     *
     * @return $this
     */
    public function setPostClickWindow($post_click_window)
    {


        $this->container['post_click_window'] = $post_click_window;

        return $this;
    }

    /**
     * Gets post_view_window_enabled
     *
     * @return float|null
     */
    public function getPostViewWindowEnabled()
    {
        return $this->container['post_view_window_enabled'];
    }

    /**
     * Sets post_view_window_enabled
     *
     * @param float|null $post_view_window_enabled Post-View Conversion Interval. If Use Attribution & tracking - Required.
     *
     * @return $this
     */
    public function setPostViewWindowEnabled($post_view_window_enabled)
    {
        $this->container['post_view_window_enabled'] = $post_view_window_enabled;

        return $this;
    }

    /**
     * Gets post_view_window_period
     *
     * @return float|null
     */
    public function getPostViewWindowPeriod()
    {
        return $this->container['post_view_window_period'];
    }

    /**
     * Sets post_view_window_period
     *
     * @param float|null $post_view_window_period Interval. If Use Attribution & tracking and post_view_window_enabled = 1 - Required. One of the ID values of parameter `post_window_intervals` in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setPostViewWindowPeriod($post_view_window_period)
    {
        $this->container['post_view_window_period'] = $post_view_window_period;

        return $this;
    }

    /**
     * Gets post_view_window
     *
     * @return float|null
     */
    public function getPostViewWindow()
    {
        return $this->container['post_view_window'];
    }

    /**
     * Sets post_view_window
     *
     * @param float|null $post_view_window Number. If Use Attribution & tracking and post_view_window_enabled = 1 - Required.
     *
     * @return $this
     */
    public function setPostViewWindow($post_view_window)
    {


        $this->container['post_view_window'] = $post_view_window;

        return $this;
    }

    /**
     * Gets ssp_test_phase
     *
     * @return int|null
     */
    public function getSspTestPhase()
    {
        return $this->container['ssp_test_phase'];
    }

    /**
     * Sets ssp_test_phase
     *
     * @param int|null $ssp_test_phase SSP Test Phase. **Only for Admins**
     *
     * @return $this
     */
    public function setSspTestPhase($ssp_test_phase)
    {
        $this->container['ssp_test_phase'] = $ssp_test_phase;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



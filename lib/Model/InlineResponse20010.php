<?php
/**
 * InlineResponse20010
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20010 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20010 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type_id' => 'int',
        'user_id' => 'int',
        'active' => 'int',
        'is_1pas' => 'int',
        'iab_attr' => 'string',
        'adomain' => 'string',
        'image_attachment' => 'string',
        'size' => 'int',
        'destination_url' => 'string',
        'macros_custom_data' => 'string',
        'created' => 'int',
        'updated' => 'int',
        'targetings' => 'float[]',
        'approval_status' => '\OpenAPI\Client\Model\InlineResponse2005Approvals[]',
        'username' => 'string',
        'subdomain_alias' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type_id' => null,
        'user_id' => null,
        'active' => null,
        'is_1pas' => null,
        'iab_attr' => null,
        'adomain' => null,
        'image_attachment' => null,
        'size' => null,
        'destination_url' => null,
        'macros_custom_data' => null,
        'created' => null,
        'updated' => null,
        'targetings' => null,
        'approval_status' => null,
        'username' => null,
        'subdomain_alias' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type_id' => 'type_id',
        'user_id' => 'user_id',
        'active' => 'active',
        'is_1pas' => 'is_1pas',
        'iab_attr' => 'iab_attr',
        'adomain' => 'adomain',
        'image_attachment' => 'image_attachment',
        'size' => 'size',
        'destination_url' => 'destination_url',
        'macros_custom_data' => 'macros_custom_data',
        'created' => 'created',
        'updated' => 'updated',
        'targetings' => 'targetings',
        'approval_status' => 'approval_status',
        'username' => 'username',
        'subdomain_alias' => 'subdomain_alias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type_id' => 'setTypeId',
        'user_id' => 'setUserId',
        'active' => 'setActive',
        'is_1pas' => 'setIs1pas',
        'iab_attr' => 'setIabAttr',
        'adomain' => 'setAdomain',
        'image_attachment' => 'setImageAttachment',
        'size' => 'setSize',
        'destination_url' => 'setDestinationUrl',
        'macros_custom_data' => 'setMacrosCustomData',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'targetings' => 'setTargetings',
        'approval_status' => 'setApprovalStatus',
        'username' => 'setUsername',
        'subdomain_alias' => 'setSubdomainAlias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type_id' => 'getTypeId',
        'user_id' => 'getUserId',
        'active' => 'getActive',
        'is_1pas' => 'getIs1pas',
        'iab_attr' => 'getIabAttr',
        'adomain' => 'getAdomain',
        'image_attachment' => 'getImageAttachment',
        'size' => 'getSize',
        'destination_url' => 'getDestinationUrl',
        'macros_custom_data' => 'getMacrosCustomData',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'targetings' => 'getTargetings',
        'approval_status' => 'getApprovalStatus',
        'username' => 'getUsername',
        'subdomain_alias' => 'getSubdomainAlias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['is_1pas'] = isset($data['is_1pas']) ? $data['is_1pas'] : null;
        $this->container['iab_attr'] = isset($data['iab_attr']) ? $data['iab_attr'] : null;
        $this->container['adomain'] = isset($data['adomain']) ? $data['adomain'] : null;
        $this->container['image_attachment'] = isset($data['image_attachment']) ? $data['image_attachment'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['destination_url'] = isset($data['destination_url']) ? $data['destination_url'] : null;
        $this->container['macros_custom_data'] = isset($data['macros_custom_data']) ? $data['macros_custom_data'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['targetings'] = isset($data['targetings']) ? $data['targetings'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['subdomain_alias'] = isset($data['subdomain_alias']) ? $data['subdomain_alias'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id type_id
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int|null $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets is_1pas
     *
     * @return int|null
     */
    public function getIs1pas()
    {
        return $this->container['is_1pas'];
    }

    /**
     * Sets is_1pas
     *
     * @param int|null $is_1pas is_1pas
     *
     * @return $this
     */
    public function setIs1pas($is_1pas)
    {
        $this->container['is_1pas'] = $is_1pas;

        return $this;
    }

    /**
     * Gets iab_attr
     *
     * @return string|null
     */
    public function getIabAttr()
    {
        return $this->container['iab_attr'];
    }

    /**
     * Sets iab_attr
     *
     * @param string|null $iab_attr iab_attr
     *
     * @return $this
     */
    public function setIabAttr($iab_attr)
    {
        $this->container['iab_attr'] = $iab_attr;

        return $this;
    }

    /**
     * Gets adomain
     *
     * @return string|null
     */
    public function getAdomain()
    {
        return $this->container['adomain'];
    }

    /**
     * Sets adomain
     *
     * @param string|null $adomain adomain
     *
     * @return $this
     */
    public function setAdomain($adomain)
    {
        $this->container['adomain'] = $adomain;

        return $this;
    }

    /**
     * Gets image_attachment
     *
     * @return string|null
     */
    public function getImageAttachment()
    {
        return $this->container['image_attachment'];
    }

    /**
     * Sets image_attachment
     *
     * @param string|null $image_attachment image_attachment
     *
     * @return $this
     */
    public function setImageAttachment($image_attachment)
    {
        $this->container['image_attachment'] = $image_attachment;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets destination_url
     *
     * @return string|null
     */
    public function getDestinationUrl()
    {
        return $this->container['destination_url'];
    }

    /**
     * Sets destination_url
     *
     * @param string|null $destination_url destination_url
     *
     * @return $this
     */
    public function setDestinationUrl($destination_url)
    {
        $this->container['destination_url'] = $destination_url;

        return $this;
    }

    /**
     * Gets macros_custom_data
     *
     * @return string|null
     */
    public function getMacrosCustomData()
    {
        return $this->container['macros_custom_data'];
    }

    /**
     * Sets macros_custom_data
     *
     * @param string|null $macros_custom_data macros_custom_data
     *
     * @return $this
     */
    public function setMacrosCustomData($macros_custom_data)
    {
        $this->container['macros_custom_data'] = $macros_custom_data;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int|null $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets targetings
     *
     * @return float[]|null
     */
    public function getTargetings()
    {
        return $this->container['targetings'];
    }

    /**
     * Sets targetings
     *
     * @param float[]|null $targetings targetings
     *
     * @return $this
     */
    public function setTargetings($targetings)
    {
        $this->container['targetings'] = $targetings;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return \OpenAPI\Client\Model\InlineResponse2005Approvals[]|null
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param \OpenAPI\Client\Model\InlineResponse2005Approvals[]|null $approval_status approval_status
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets subdomain_alias
     *
     * @return string|null
     */
    public function getSubdomainAlias()
    {
        return $this->container['subdomain_alias'];
    }

    /**
     * Sets subdomain_alias
     *
     * @param string|null $subdomain_alias subdomain_alias
     *
     * @return $this
     */
    public function setSubdomainAlias($subdomain_alias)
    {
        $this->container['subdomain_alias'] = $subdomain_alias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



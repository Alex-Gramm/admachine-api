<?php
/**
 * SettingsUsersAdvertiser
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SettingsUsersAdvertiser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SettingsUsersAdvertiser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Settings_Users_advertiser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_verification_enabled' => 'bool',
        'default_margin' => 'float',
        'default_commission' => 'float',
        'enable_signup' => 'bool',
        'enable_signup_approval' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id_verification_enabled' => null,
        'default_margin' => null,
        'default_commission' => null,
        'enable_signup' => null,
        'enable_signup_approval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_verification_enabled' => 'id_verification_enabled',
        'default_margin' => 'default_margin',
        'default_commission' => 'default_commission',
        'enable_signup' => 'enable_signup',
        'enable_signup_approval' => 'enable_signup_approval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_verification_enabled' => 'setIdVerificationEnabled',
        'default_margin' => 'setDefaultMargin',
        'default_commission' => 'setDefaultCommission',
        'enable_signup' => 'setEnableSignup',
        'enable_signup_approval' => 'setEnableSignupApproval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_verification_enabled' => 'getIdVerificationEnabled',
        'default_margin' => 'getDefaultMargin',
        'default_commission' => 'getDefaultCommission',
        'enable_signup' => 'getEnableSignup',
        'enable_signup_approval' => 'getEnableSignupApproval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_verification_enabled'] = isset($data['id_verification_enabled']) ? $data['id_verification_enabled'] : null;
        $this->container['default_margin'] = isset($data['default_margin']) ? $data['default_margin'] : null;
        $this->container['default_commission'] = isset($data['default_commission']) ? $data['default_commission'] : null;
        $this->container['enable_signup'] = isset($data['enable_signup']) ? $data['enable_signup'] : null;
        $this->container['enable_signup_approval'] = isset($data['enable_signup_approval']) ? $data['enable_signup_approval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['default_margin']) && ($this->container['default_margin'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'default_margin', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['default_margin']) && ($this->container['default_margin'] < 0)) {
            $invalidProperties[] = "invalid value for 'default_margin', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_commission']) && ($this->container['default_commission'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'default_commission', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['default_commission']) && ($this->container['default_commission'] < 0)) {
            $invalidProperties[] = "invalid value for 'default_commission', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_verification_enabled
     *
     * @return bool|null
     */
    public function getIdVerificationEnabled()
    {
        return $this->container['id_verification_enabled'];
    }

    /**
     * Sets id_verification_enabled
     *
     * @param bool|null $id_verification_enabled Is ID verification enabled
     *
     * @return $this
     */
    public function setIdVerificationEnabled($id_verification_enabled)
    {
        $this->container['id_verification_enabled'] = $id_verification_enabled;

        return $this;
    }

    /**
     * Gets default_margin
     *
     * @return float|null
     */
    public function getDefaultMargin()
    {
        return $this->container['default_margin'];
    }

    /**
     * Sets default_margin
     *
     * @param float|null $default_margin Advertiser default margin
     *
     * @return $this
     */
    public function setDefaultMargin($default_margin)
    {

        if (!is_null($default_margin) && ($default_margin > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $default_margin when calling SettingsUsersAdvertiser., must be smaller than or equal to 1E+2.');
        }

        $this->container['default_margin'] = $default_margin;

        return $this;
    }

    /**
     * Gets default_commission
     *
     * @return float|null
     */
    public function getDefaultCommission()
    {
        return $this->container['default_commission'];
    }

    /**
     * Sets default_commission
     *
     * @param float|null $default_commission Advertiser default commission
     *
     * @return $this
     */
    public function setDefaultCommission($default_commission)
    {

        if (!is_null($default_commission) && ($default_commission > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $default_commission when calling SettingsUsersAdvertiser., must be smaller than or equal to 1E+2.');
        }

        $this->container['default_commission'] = $default_commission;

        return $this;
    }

    /**
     * Gets enable_signup
     *
     * @return bool|null
     */
    public function getEnableSignup()
    {
        return $this->container['enable_signup'];
    }

    /**
     * Sets enable_signup
     *
     * @param bool|null $enable_signup Enable signup for advertisers
     *
     * @return $this
     */
    public function setEnableSignup($enable_signup)
    {
        $this->container['enable_signup'] = $enable_signup;

        return $this;
    }

    /**
     * Gets enable_signup_approval
     *
     * @return bool|null
     */
    public function getEnableSignupApproval()
    {
        return $this->container['enable_signup_approval'];
    }

    /**
     * Sets enable_signup_approval
     *
     * @param bool|null $enable_signup_approval Enable advertisers approval (Only for simple subdomains)
     *
     * @return $this
     */
    public function setEnableSignupApproval($enable_signup_approval)
    {
        $this->container['enable_signup_approval'] = $enable_signup_approval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



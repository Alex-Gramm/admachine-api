<?php
/**
 * UserDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field_of_activity' => 'string',
        'website_category' => 'string',
        'solvable_issue' => 'string',
        'media_buying_experience' => 'int',
        'monthly_impressions_volume' => 'int',
        'where_find' => 'int',
        'where_find_other' => 'string',
        'monthly_budget' => 'float',
        'monthly_revenue' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'field_of_activity' => null,
        'website_category' => null,
        'solvable_issue' => null,
        'media_buying_experience' => null,
        'monthly_impressions_volume' => null,
        'where_find' => null,
        'where_find_other' => null,
        'monthly_budget' => null,
        'monthly_revenue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_of_activity' => 'field_of_activity',
        'website_category' => 'website_category',
        'solvable_issue' => 'solvable_issue',
        'media_buying_experience' => 'media_buying_experience',
        'monthly_impressions_volume' => 'monthly_impressions_volume',
        'where_find' => 'where_find',
        'where_find_other' => 'where_find_other',
        'monthly_budget' => 'monthly_budget',
        'monthly_revenue' => 'monthly_revenue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_of_activity' => 'setFieldOfActivity',
        'website_category' => 'setWebsiteCategory',
        'solvable_issue' => 'setSolvableIssue',
        'media_buying_experience' => 'setMediaBuyingExperience',
        'monthly_impressions_volume' => 'setMonthlyImpressionsVolume',
        'where_find' => 'setWhereFind',
        'where_find_other' => 'setWhereFindOther',
        'monthly_budget' => 'setMonthlyBudget',
        'monthly_revenue' => 'setMonthlyRevenue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_of_activity' => 'getFieldOfActivity',
        'website_category' => 'getWebsiteCategory',
        'solvable_issue' => 'getSolvableIssue',
        'media_buying_experience' => 'getMediaBuyingExperience',
        'monthly_impressions_volume' => 'getMonthlyImpressionsVolume',
        'where_find' => 'getWhereFind',
        'where_find_other' => 'getWhereFindOther',
        'monthly_budget' => 'getMonthlyBudget',
        'monthly_revenue' => 'getMonthlyRevenue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_of_activity'] = isset($data['field_of_activity']) ? $data['field_of_activity'] : null;
        $this->container['website_category'] = isset($data['website_category']) ? $data['website_category'] : null;
        $this->container['solvable_issue'] = isset($data['solvable_issue']) ? $data['solvable_issue'] : null;
        $this->container['media_buying_experience'] = isset($data['media_buying_experience']) ? $data['media_buying_experience'] : null;
        $this->container['monthly_impressions_volume'] = isset($data['monthly_impressions_volume']) ? $data['monthly_impressions_volume'] : null;
        $this->container['where_find'] = isset($data['where_find']) ? $data['where_find'] : null;
        $this->container['where_find_other'] = isset($data['where_find_other']) ? $data['where_find_other'] : null;
        $this->container['monthly_budget'] = isset($data['monthly_budget']) ? $data['monthly_budget'] : null;
        $this->container['monthly_revenue'] = isset($data['monthly_revenue']) ? $data['monthly_revenue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_of_activity
     *
     * @return string|null
     */
    public function getFieldOfActivity()
    {
        return $this->container['field_of_activity'];
    }

    /**
     * Sets field_of_activity
     *
     * @param string|null $field_of_activity Field of activity. **Only For Advertisers**
     *
     * @return $this
     */
    public function setFieldOfActivity($field_of_activity)
    {
        $this->container['field_of_activity'] = $field_of_activity;

        return $this;
    }

    /**
     * Gets website_category
     *
     * @return string|null
     */
    public function getWebsiteCategory()
    {
        return $this->container['website_category'];
    }

    /**
     * Sets website_category
     *
     * @param string|null $website_category App/Website category. **Only For Publishers**
     *
     * @return $this
     */
    public function setWebsiteCategory($website_category)
    {
        $this->container['website_category'] = $website_category;

        return $this;
    }

    /**
     * Gets solvable_issue
     *
     * @return string|null
     */
    public function getSolvableIssue()
    {
        return $this->container['solvable_issue'];
    }

    /**
     * Sets solvable_issue
     *
     * @param string|null $solvable_issue What problem do you want to solve with us
     *
     * @return $this
     */
    public function setSolvableIssue($solvable_issue)
    {
        $this->container['solvable_issue'] = $solvable_issue;

        return $this;
    }

    /**
     * Gets media_buying_experience
     *
     * @return int|null
     */
    public function getMediaBuyingExperience()
    {
        return $this->container['media_buying_experience'];
    }

    /**
     * Sets media_buying_experience
     *
     * @param int|null $media_buying_experience Media buying experience. One of the ID values of parameter media_buying_experience in /constants is added to this parameter. **Only For Advertisers**
     *
     * @return $this
     */
    public function setMediaBuyingExperience($media_buying_experience)
    {
        $this->container['media_buying_experience'] = $media_buying_experience;

        return $this;
    }

    /**
     * Gets monthly_impressions_volume
     *
     * @return int|null
     */
    public function getMonthlyImpressionsVolume()
    {
        return $this->container['monthly_impressions_volume'];
    }

    /**
     * Sets monthly_impressions_volume
     *
     * @param int|null $monthly_impressions_volume Mounthy impressions volume. One of the ID values of parameter monthly_impressions_volume in /constants is added to this parameter. **Only For Publishers**
     *
     * @return $this
     */
    public function setMonthlyImpressionsVolume($monthly_impressions_volume)
    {
        $this->container['monthly_impressions_volume'] = $monthly_impressions_volume;

        return $this;
    }

    /**
     * Gets where_find
     *
     * @return int|null
     */
    public function getWhereFind()
    {
        return $this->container['where_find'];
    }

    /**
     * Sets where_find
     *
     * @param int|null $where_find Where Find. One of the ID values of parameter user_details_where_find in /constants is added to this parameter.
     *
     * @return $this
     */
    public function setWhereFind($where_find)
    {
        $this->container['where_find'] = $where_find;

        return $this;
    }

    /**
     * Gets where_find_other
     *
     * @return string|null
     */
    public function getWhereFindOther()
    {
        return $this->container['where_find_other'];
    }

    /**
     * Sets where_find_other
     *
     * @param string|null $where_find_other User version of where_find.
     *
     * @return $this
     */
    public function setWhereFindOther($where_find_other)
    {
        $this->container['where_find_other'] = $where_find_other;

        return $this;
    }

    /**
     * Gets monthly_budget
     *
     * @return float|null
     */
    public function getMonthlyBudget()
    {
        return $this->container['monthly_budget'];
    }

    /**
     * Sets monthly_budget
     *
     * @param float|null $monthly_budget Monthly budget for advertisers. **Only For Advertisers**
     *
     * @return $this
     */
    public function setMonthlyBudget($monthly_budget)
    {
        $this->container['monthly_budget'] = $monthly_budget;

        return $this;
    }

    /**
     * Gets monthly_revenue
     *
     * @return float|null
     */
    public function getMonthlyRevenue()
    {
        return $this->container['monthly_revenue'];
    }

    /**
     * Sets monthly_revenue
     *
     * @param float|null $monthly_revenue Monthly revenue. **Only For Publishers**
     *
     * @return $this
     */
    public function setMonthlyRevenue($monthly_revenue)
    {
        $this->container['monthly_revenue'] = $monthly_revenue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



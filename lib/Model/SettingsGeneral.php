<?php
/**
 * SettingsGeneral
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SettingsGeneral Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SettingsGeneral implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Settings_General';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'logo' => 'string',
        'favicon' => 'string',
        'css' => 'string',
        'ui_domain' => 'string',
        'ads_api_domain' => 'string',
        'js_auth_users' => 'string',
        'js_unauth_users' => 'string',
        'powered_by_removed' => 'bool',
        'knowledge_url' => 'string',
        'support_email' => 'string',
        'terms_of_service_url' => 'string',
        'privacy_policy_url' => 'string',
        'privacy_policy_text' => 'string',
        'rules_of_service_text' => 'string',
        'terms_of_service_text' => 'string',
        'enable_id_verification' => 'bool',
        'rtb_domain' => 'string',
        'rtb_domain_doubleclick' => 'string',
        'cdn_domain' => 'string',
        'cdn_domain_doubleclick' => 'string',
        'strategies_min_budget' => 'int',
        'min_deposit' => 'int',
        'first_deposit_bonus' => 'int',
        'is_fixed_deposit_bonus' => 'bool',
        'creative_max_video_size' => 'int',
        'creative_max_image_size' => 'int',
        'bonus_when_started_spend' => 'bool',
        'bonus_checklist_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'logo' => null,
        'favicon' => null,
        'css' => null,
        'ui_domain' => null,
        'ads_api_domain' => null,
        'js_auth_users' => null,
        'js_unauth_users' => null,
        'powered_by_removed' => null,
        'knowledge_url' => null,
        'support_email' => null,
        'terms_of_service_url' => null,
        'privacy_policy_url' => null,
        'privacy_policy_text' => null,
        'rules_of_service_text' => null,
        'terms_of_service_text' => null,
        'enable_id_verification' => null,
        'rtb_domain' => null,
        'rtb_domain_doubleclick' => null,
        'cdn_domain' => null,
        'cdn_domain_doubleclick' => null,
        'strategies_min_budget' => null,
        'min_deposit' => null,
        'first_deposit_bonus' => null,
        'is_fixed_deposit_bonus' => null,
        'creative_max_video_size' => null,
        'creative_max_image_size' => null,
        'bonus_when_started_spend' => null,
        'bonus_checklist_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'logo' => 'logo',
        'favicon' => 'favicon',
        'css' => 'css',
        'ui_domain' => 'ui_domain',
        'ads_api_domain' => 'ads_api_domain',
        'js_auth_users' => 'js_auth_users',
        'js_unauth_users' => 'js_unauth_users',
        'powered_by_removed' => 'powered_by_removed',
        'knowledge_url' => 'knowledge_url',
        'support_email' => 'support_email',
        'terms_of_service_url' => 'terms_of_service_url',
        'privacy_policy_url' => 'privacy_policy_url',
        'privacy_policy_text' => 'privacy_policy_text',
        'rules_of_service_text' => 'rules_of_service_text',
        'terms_of_service_text' => 'terms_of_service_text',
        'enable_id_verification' => 'enable_id_verification',
        'rtb_domain' => 'rtb_domain',
        'rtb_domain_doubleclick' => 'rtb_domain_doubleclick',
        'cdn_domain' => 'cdn_domain',
        'cdn_domain_doubleclick' => 'cdn_domain_doubleclick',
        'strategies_min_budget' => 'strategies_min_budget',
        'min_deposit' => 'min_deposit',
        'first_deposit_bonus' => 'first_deposit_bonus',
        'is_fixed_deposit_bonus' => 'is_fixed_deposit_bonus',
        'creative_max_video_size' => 'creative_max_video_size',
        'creative_max_image_size' => 'creative_max_image_size',
        'bonus_when_started_spend' => 'bonus_when_started_spend',
        'bonus_checklist_enabled' => 'bonus_checklist_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'logo' => 'setLogo',
        'favicon' => 'setFavicon',
        'css' => 'setCss',
        'ui_domain' => 'setUiDomain',
        'ads_api_domain' => 'setAdsApiDomain',
        'js_auth_users' => 'setJsAuthUsers',
        'js_unauth_users' => 'setJsUnauthUsers',
        'powered_by_removed' => 'setPoweredByRemoved',
        'knowledge_url' => 'setKnowledgeUrl',
        'support_email' => 'setSupportEmail',
        'terms_of_service_url' => 'setTermsOfServiceUrl',
        'privacy_policy_url' => 'setPrivacyPolicyUrl',
        'privacy_policy_text' => 'setPrivacyPolicyText',
        'rules_of_service_text' => 'setRulesOfServiceText',
        'terms_of_service_text' => 'setTermsOfServiceText',
        'enable_id_verification' => 'setEnableIdVerification',
        'rtb_domain' => 'setRtbDomain',
        'rtb_domain_doubleclick' => 'setRtbDomainDoubleclick',
        'cdn_domain' => 'setCdnDomain',
        'cdn_domain_doubleclick' => 'setCdnDomainDoubleclick',
        'strategies_min_budget' => 'setStrategiesMinBudget',
        'min_deposit' => 'setMinDeposit',
        'first_deposit_bonus' => 'setFirstDepositBonus',
        'is_fixed_deposit_bonus' => 'setIsFixedDepositBonus',
        'creative_max_video_size' => 'setCreativeMaxVideoSize',
        'creative_max_image_size' => 'setCreativeMaxImageSize',
        'bonus_when_started_spend' => 'setBonusWhenStartedSpend',
        'bonus_checklist_enabled' => 'setBonusChecklistEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'logo' => 'getLogo',
        'favicon' => 'getFavicon',
        'css' => 'getCss',
        'ui_domain' => 'getUiDomain',
        'ads_api_domain' => 'getAdsApiDomain',
        'js_auth_users' => 'getJsAuthUsers',
        'js_unauth_users' => 'getJsUnauthUsers',
        'powered_by_removed' => 'getPoweredByRemoved',
        'knowledge_url' => 'getKnowledgeUrl',
        'support_email' => 'getSupportEmail',
        'terms_of_service_url' => 'getTermsOfServiceUrl',
        'privacy_policy_url' => 'getPrivacyPolicyUrl',
        'privacy_policy_text' => 'getPrivacyPolicyText',
        'rules_of_service_text' => 'getRulesOfServiceText',
        'terms_of_service_text' => 'getTermsOfServiceText',
        'enable_id_verification' => 'getEnableIdVerification',
        'rtb_domain' => 'getRtbDomain',
        'rtb_domain_doubleclick' => 'getRtbDomainDoubleclick',
        'cdn_domain' => 'getCdnDomain',
        'cdn_domain_doubleclick' => 'getCdnDomainDoubleclick',
        'strategies_min_budget' => 'getStrategiesMinBudget',
        'min_deposit' => 'getMinDeposit',
        'first_deposit_bonus' => 'getFirstDepositBonus',
        'is_fixed_deposit_bonus' => 'getIsFixedDepositBonus',
        'creative_max_video_size' => 'getCreativeMaxVideoSize',
        'creative_max_image_size' => 'getCreativeMaxImageSize',
        'bonus_when_started_spend' => 'getBonusWhenStartedSpend',
        'bonus_checklist_enabled' => 'getBonusChecklistEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['favicon'] = isset($data['favicon']) ? $data['favicon'] : null;
        $this->container['css'] = isset($data['css']) ? $data['css'] : null;
        $this->container['ui_domain'] = isset($data['ui_domain']) ? $data['ui_domain'] : null;
        $this->container['ads_api_domain'] = isset($data['ads_api_domain']) ? $data['ads_api_domain'] : null;
        $this->container['js_auth_users'] = isset($data['js_auth_users']) ? $data['js_auth_users'] : null;
        $this->container['js_unauth_users'] = isset($data['js_unauth_users']) ? $data['js_unauth_users'] : null;
        $this->container['powered_by_removed'] = isset($data['powered_by_removed']) ? $data['powered_by_removed'] : null;
        $this->container['knowledge_url'] = isset($data['knowledge_url']) ? $data['knowledge_url'] : null;
        $this->container['support_email'] = isset($data['support_email']) ? $data['support_email'] : null;
        $this->container['terms_of_service_url'] = isset($data['terms_of_service_url']) ? $data['terms_of_service_url'] : null;
        $this->container['privacy_policy_url'] = isset($data['privacy_policy_url']) ? $data['privacy_policy_url'] : null;
        $this->container['privacy_policy_text'] = isset($data['privacy_policy_text']) ? $data['privacy_policy_text'] : null;
        $this->container['rules_of_service_text'] = isset($data['rules_of_service_text']) ? $data['rules_of_service_text'] : null;
        $this->container['terms_of_service_text'] = isset($data['terms_of_service_text']) ? $data['terms_of_service_text'] : null;
        $this->container['enable_id_verification'] = isset($data['enable_id_verification']) ? $data['enable_id_verification'] : null;
        $this->container['rtb_domain'] = isset($data['rtb_domain']) ? $data['rtb_domain'] : null;
        $this->container['rtb_domain_doubleclick'] = isset($data['rtb_domain_doubleclick']) ? $data['rtb_domain_doubleclick'] : null;
        $this->container['cdn_domain'] = isset($data['cdn_domain']) ? $data['cdn_domain'] : null;
        $this->container['cdn_domain_doubleclick'] = isset($data['cdn_domain_doubleclick']) ? $data['cdn_domain_doubleclick'] : null;
        $this->container['strategies_min_budget'] = isset($data['strategies_min_budget']) ? $data['strategies_min_budget'] : null;
        $this->container['min_deposit'] = isset($data['min_deposit']) ? $data['min_deposit'] : null;
        $this->container['first_deposit_bonus'] = isset($data['first_deposit_bonus']) ? $data['first_deposit_bonus'] : null;
        $this->container['is_fixed_deposit_bonus'] = isset($data['is_fixed_deposit_bonus']) ? $data['is_fixed_deposit_bonus'] : null;
        $this->container['creative_max_video_size'] = isset($data['creative_max_video_size']) ? $data['creative_max_video_size'] : null;
        $this->container['creative_max_image_size'] = isset($data['creative_max_image_size']) ? $data['creative_max_image_size'] : null;
        $this->container['bonus_when_started_spend'] = isset($data['bonus_when_started_spend']) ? $data['bonus_when_started_spend'] : null;
        $this->container['bonus_checklist_enabled'] = isset($data['bonus_checklist_enabled']) ? $data['bonus_checklist_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['min_deposit']) && ($this->container['min_deposit'] > 10000)) {
            $invalidProperties[] = "invalid value for 'min_deposit', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['min_deposit']) && ($this->container['min_deposit'] < 25)) {
            $invalidProperties[] = "invalid value for 'min_deposit', must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['first_deposit_bonus']) && ($this->container['first_deposit_bonus'] > 1000)) {
            $invalidProperties[] = "invalid value for 'first_deposit_bonus', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['first_deposit_bonus']) && ($this->container['first_deposit_bonus'] < 0)) {
            $invalidProperties[] = "invalid value for 'first_deposit_bonus', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['creative_max_video_size']) && ($this->container['creative_max_video_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'creative_max_video_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['creative_max_image_size']) && ($this->container['creative_max_image_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'creative_max_image_size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Network name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets favicon
     *
     * @return string|null
     */
    public function getFavicon()
    {
        return $this->container['favicon'];
    }

    /**
     * Sets favicon
     *
     * @param string|null $favicon Favicon
     *
     * @return $this
     */
    public function setFavicon($favicon)
    {
        $this->container['favicon'] = $favicon;

        return $this;
    }

    /**
     * Gets css
     *
     * @return string|null
     */
    public function getCss()
    {
        return $this->container['css'];
    }

    /**
     * Sets css
     *
     * @param string|null $css Custom CSS
     *
     * @return $this
     */
    public function setCss($css)
    {
        $this->container['css'] = $css;

        return $this;
    }

    /**
     * Gets ui_domain
     *
     * @return string|null
     */
    public function getUiDomain()
    {
        return $this->container['ui_domain'];
    }

    /**
     * Sets ui_domain
     *
     * @param string|null $ui_domain UI domain
     *
     * @return $this
     */
    public function setUiDomain($ui_domain)
    {
        $this->container['ui_domain'] = $ui_domain;

        return $this;
    }

    /**
     * Gets ads_api_domain
     *
     * @return string|null
     */
    public function getAdsApiDomain()
    {
        return $this->container['ads_api_domain'];
    }

    /**
     * Sets ads_api_domain
     *
     * @param string|null $ads_api_domain Ads API domain
     *
     * @return $this
     */
    public function setAdsApiDomain($ads_api_domain)
    {
        $this->container['ads_api_domain'] = $ads_api_domain;

        return $this;
    }

    /**
     * Gets js_auth_users
     *
     * @return string|null
     */
    public function getJsAuthUsers()
    {
        return $this->container['js_auth_users'];
    }

    /**
     * Sets js_auth_users
     *
     * @param string|null $js_auth_users Authorized user JS
     *
     * @return $this
     */
    public function setJsAuthUsers($js_auth_users)
    {
        $this->container['js_auth_users'] = $js_auth_users;

        return $this;
    }

    /**
     * Gets js_unauth_users
     *
     * @return string|null
     */
    public function getJsUnauthUsers()
    {
        return $this->container['js_unauth_users'];
    }

    /**
     * Sets js_unauth_users
     *
     * @param string|null $js_unauth_users Unauthorized user JS
     *
     * @return $this
     */
    public function setJsUnauthUsers($js_unauth_users)
    {
        $this->container['js_unauth_users'] = $js_unauth_users;

        return $this;
    }

    /**
     * Gets powered_by_removed
     *
     * @return bool|null
     */
    public function getPoweredByRemoved()
    {
        return $this->container['powered_by_removed'];
    }

    /**
     * Sets powered_by_removed
     *
     * @param bool|null $powered_by_removed Is \"powered by\" removed
     *
     * @return $this
     */
    public function setPoweredByRemoved($powered_by_removed)
    {
        $this->container['powered_by_removed'] = $powered_by_removed;

        return $this;
    }

    /**
     * Gets knowledge_url
     *
     * @return string|null
     */
    public function getKnowledgeUrl()
    {
        return $this->container['knowledge_url'];
    }

    /**
     * Sets knowledge_url
     *
     * @param string|null $knowledge_url Knowledge base url
     *
     * @return $this
     */
    public function setKnowledgeUrl($knowledge_url)
    {
        $this->container['knowledge_url'] = $knowledge_url;

        return $this;
    }

    /**
     * Gets support_email
     *
     * @return string|null
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     *
     * @param string|null $support_email Support email
     *
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets terms_of_service_url
     *
     * @return string|null
     */
    public function getTermsOfServiceUrl()
    {
        return $this->container['terms_of_service_url'];
    }

    /**
     * Sets terms_of_service_url
     *
     * @param string|null $terms_of_service_url Terms of service url
     *
     * @return $this
     */
    public function setTermsOfServiceUrl($terms_of_service_url)
    {
        $this->container['terms_of_service_url'] = $terms_of_service_url;

        return $this;
    }

    /**
     * Gets privacy_policy_url
     *
     * @return string|null
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacy_policy_url'];
    }

    /**
     * Sets privacy_policy_url
     *
     * @param string|null $privacy_policy_url Privacy policy url
     *
     * @return $this
     */
    public function setPrivacyPolicyUrl($privacy_policy_url)
    {
        $this->container['privacy_policy_url'] = $privacy_policy_url;

        return $this;
    }

    /**
     * Gets privacy_policy_text
     *
     * @return string|null
     */
    public function getPrivacyPolicyText()
    {
        return $this->container['privacy_policy_text'];
    }

    /**
     * Sets privacy_policy_text
     *
     * @param string|null $privacy_policy_text Privacy policy text
     *
     * @return $this
     */
    public function setPrivacyPolicyText($privacy_policy_text)
    {
        $this->container['privacy_policy_text'] = $privacy_policy_text;

        return $this;
    }

    /**
     * Gets rules_of_service_text
     *
     * @return string|null
     */
    public function getRulesOfServiceText()
    {
        return $this->container['rules_of_service_text'];
    }

    /**
     * Sets rules_of_service_text
     *
     * @param string|null $rules_of_service_text Rules of service text
     *
     * @return $this
     */
    public function setRulesOfServiceText($rules_of_service_text)
    {
        $this->container['rules_of_service_text'] = $rules_of_service_text;

        return $this;
    }

    /**
     * Gets terms_of_service_text
     *
     * @return string|null
     */
    public function getTermsOfServiceText()
    {
        return $this->container['terms_of_service_text'];
    }

    /**
     * Sets terms_of_service_text
     *
     * @param string|null $terms_of_service_text Terms of service text
     *
     * @return $this
     */
    public function setTermsOfServiceText($terms_of_service_text)
    {
        $this->container['terms_of_service_text'] = $terms_of_service_text;

        return $this;
    }

    /**
     * Gets enable_id_verification
     *
     * @return bool|null
     */
    public function getEnableIdVerification()
    {
        return $this->container['enable_id_verification'];
    }

    /**
     * Sets enable_id_verification
     *
     * @param bool|null $enable_id_verification Enable id verification for advertisers
     *
     * @return $this
     */
    public function setEnableIdVerification($enable_id_verification)
    {
        $this->container['enable_id_verification'] = $enable_id_verification;

        return $this;
    }

    /**
     * Gets rtb_domain
     *
     * @return string|null
     */
    public function getRtbDomain()
    {
        return $this->container['rtb_domain'];
    }

    /**
     * Sets rtb_domain
     *
     * @param string|null $rtb_domain RTB domain
     *
     * @return $this
     */
    public function setRtbDomain($rtb_domain)
    {
        $this->container['rtb_domain'] = $rtb_domain;

        return $this;
    }

    /**
     * Gets rtb_domain_doubleclick
     *
     * @return string|null
     */
    public function getRtbDomainDoubleclick()
    {
        return $this->container['rtb_domain_doubleclick'];
    }

    /**
     * Sets rtb_domain_doubleclick
     *
     * @param string|null $rtb_domain_doubleclick RTB domain doubleclick
     *
     * @return $this
     */
    public function setRtbDomainDoubleclick($rtb_domain_doubleclick)
    {
        $this->container['rtb_domain_doubleclick'] = $rtb_domain_doubleclick;

        return $this;
    }

    /**
     * Gets cdn_domain
     *
     * @return string|null
     */
    public function getCdnDomain()
    {
        return $this->container['cdn_domain'];
    }

    /**
     * Sets cdn_domain
     *
     * @param string|null $cdn_domain CDN domain
     *
     * @return $this
     */
    public function setCdnDomain($cdn_domain)
    {
        $this->container['cdn_domain'] = $cdn_domain;

        return $this;
    }

    /**
     * Gets cdn_domain_doubleclick
     *
     * @return string|null
     */
    public function getCdnDomainDoubleclick()
    {
        return $this->container['cdn_domain_doubleclick'];
    }

    /**
     * Sets cdn_domain_doubleclick
     *
     * @param string|null $cdn_domain_doubleclick CDN domain doubleclick
     *
     * @return $this
     */
    public function setCdnDomainDoubleclick($cdn_domain_doubleclick)
    {
        $this->container['cdn_domain_doubleclick'] = $cdn_domain_doubleclick;

        return $this;
    }

    /**
     * Gets strategies_min_budget
     *
     * @return int|null
     */
    public function getStrategiesMinBudget()
    {
        return $this->container['strategies_min_budget'];
    }

    /**
     * Sets strategies_min_budget
     *
     * @param int|null $strategies_min_budget Min Ad Set Budget
     *
     * @return $this
     */
    public function setStrategiesMinBudget($strategies_min_budget)
    {
        $this->container['strategies_min_budget'] = $strategies_min_budget;

        return $this;
    }

    /**
     * Gets min_deposit
     *
     * @return int|null
     */
    public function getMinDeposit()
    {
        return $this->container['min_deposit'];
    }

    /**
     * Sets min_deposit
     *
     * @param int|null $min_deposit Minimun deposit
     *
     * @return $this
     */
    public function setMinDeposit($min_deposit)
    {

        if (!is_null($min_deposit) && ($min_deposit > 10000)) {
            throw new \InvalidArgumentException('invalid value for $min_deposit when calling SettingsGeneral., must be smaller than or equal to 10000.');
        }
        if (!is_null($min_deposit) && ($min_deposit < 25)) {
            throw new \InvalidArgumentException('invalid value for $min_deposit when calling SettingsGeneral., must be bigger than or equal to 25.');
        }

        $this->container['min_deposit'] = $min_deposit;

        return $this;
    }

    /**
     * Gets first_deposit_bonus
     *
     * @return int|null
     */
    public function getFirstDepositBonus()
    {
        return $this->container['first_deposit_bonus'];
    }

    /**
     * Sets first_deposit_bonus
     *
     * @param int|null $first_deposit_bonus First deposit bonus
     *
     * @return $this
     */
    public function setFirstDepositBonus($first_deposit_bonus)
    {

        if (!is_null($first_deposit_bonus) && ($first_deposit_bonus > 1000)) {
            throw new \InvalidArgumentException('invalid value for $first_deposit_bonus when calling SettingsGeneral., must be smaller than or equal to 1000.');
        }
        if (!is_null($first_deposit_bonus) && ($first_deposit_bonus < 0)) {
            throw new \InvalidArgumentException('invalid value for $first_deposit_bonus when calling SettingsGeneral., must be bigger than or equal to 0.');
        }

        $this->container['first_deposit_bonus'] = $first_deposit_bonus;

        return $this;
    }

    /**
     * Gets is_fixed_deposit_bonus
     *
     * @return bool|null
     */
    public function getIsFixedDepositBonus()
    {
        return $this->container['is_fixed_deposit_bonus'];
    }

    /**
     * Sets is_fixed_deposit_bonus
     *
     * @param bool|null $is_fixed_deposit_bonus True - First deposit bonus in dollars, false - in percentages
     *
     * @return $this
     */
    public function setIsFixedDepositBonus($is_fixed_deposit_bonus)
    {
        $this->container['is_fixed_deposit_bonus'] = $is_fixed_deposit_bonus;

        return $this;
    }

    /**
     * Gets creative_max_video_size
     *
     * @return int|null
     */
    public function getCreativeMaxVideoSize()
    {
        return $this->container['creative_max_video_size'];
    }

    /**
     * Sets creative_max_video_size
     *
     * @param int|null $creative_max_video_size Max video attachment size (in bytes) **Only for Root**
     *
     * @return $this
     */
    public function setCreativeMaxVideoSize($creative_max_video_size)
    {

        if (!is_null($creative_max_video_size) && ($creative_max_video_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $creative_max_video_size when calling SettingsGeneral., must be bigger than or equal to 0.');
        }

        $this->container['creative_max_video_size'] = $creative_max_video_size;

        return $this;
    }

    /**
     * Gets creative_max_image_size
     *
     * @return int|null
     */
    public function getCreativeMaxImageSize()
    {
        return $this->container['creative_max_image_size'];
    }

    /**
     * Sets creative_max_image_size
     *
     * @param int|null $creative_max_image_size Max image attachment size (in bytes) **Only for Root**
     *
     * @return $this
     */
    public function setCreativeMaxImageSize($creative_max_image_size)
    {

        if (!is_null($creative_max_image_size) && ($creative_max_image_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $creative_max_image_size when calling SettingsGeneral., must be bigger than or equal to 0.');
        }

        $this->container['creative_max_image_size'] = $creative_max_image_size;

        return $this;
    }

    /**
     * Gets bonus_when_started_spend
     *
     * @return bool|null
     */
    public function getBonusWhenStartedSpend()
    {
        return $this->container['bonus_when_started_spend'];
    }

    /**
     * Sets bonus_when_started_spend
     *
     * @param bool|null $bonus_when_started_spend bonus_when_started_spend
     *
     * @return $this
     */
    public function setBonusWhenStartedSpend($bonus_when_started_spend)
    {
        $this->container['bonus_when_started_spend'] = $bonus_when_started_spend;

        return $this;
    }

    /**
     * Gets bonus_checklist_enabled
     *
     * @return bool|null
     */
    public function getBonusChecklistEnabled()
    {
        return $this->container['bonus_checklist_enabled'];
    }

    /**
     * Sets bonus_checklist_enabled
     *
     * @param bool|null $bonus_checklist_enabled bonus_checklist_enabled
     *
     * @return $this
     */
    public function setBonusChecklistEnabled($bonus_checklist_enabled)
    {
        $this->container['bonus_checklist_enabled'] = $bonus_checklist_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



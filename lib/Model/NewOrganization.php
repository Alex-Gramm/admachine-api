<?php
/**
 * NewOrganization
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewOrganization Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewOrganization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'newOrganization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'active' => 'float',
        'min_allowed_balance' => 'float',
        'margin' => 'float',
        'owner_exchange_commission' => 'float',
        'ui_domain' => 'string',
        'api_domain' => 'string',
        'enable_id_verification' => 'bool',
        'platform' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'active' => null,
        'min_allowed_balance' => null,
        'margin' => null,
        'owner_exchange_commission' => null,
        'ui_domain' => null,
        'api_domain' => null,
        'enable_id_verification' => null,
        'platform' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'active' => 'active',
        'min_allowed_balance' => 'min_allowed_balance',
        'margin' => 'margin',
        'owner_exchange_commission' => 'owner_exchange_commission',
        'ui_domain' => 'ui_domain',
        'api_domain' => 'api_domain',
        'enable_id_verification' => 'enable_id_verification',
        'platform' => 'platform'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'active' => 'setActive',
        'min_allowed_balance' => 'setMinAllowedBalance',
        'margin' => 'setMargin',
        'owner_exchange_commission' => 'setOwnerExchangeCommission',
        'ui_domain' => 'setUiDomain',
        'api_domain' => 'setApiDomain',
        'enable_id_verification' => 'setEnableIdVerification',
        'platform' => 'setPlatform'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'active' => 'getActive',
        'min_allowed_balance' => 'getMinAllowedBalance',
        'margin' => 'getMargin',
        'owner_exchange_commission' => 'getOwnerExchangeCommission',
        'ui_domain' => 'getUiDomain',
        'api_domain' => 'getApiDomain',
        'enable_id_verification' => 'getEnableIdVerification',
        'platform' => 'getPlatform'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['min_allowed_balance'] = isset($data['min_allowed_balance']) ? $data['min_allowed_balance'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['owner_exchange_commission'] = isset($data['owner_exchange_commission']) ? $data['owner_exchange_commission'] : null;
        $this->container['ui_domain'] = isset($data['ui_domain']) ? $data['ui_domain'] : null;
        $this->container['api_domain'] = isset($data['api_domain']) ? $data['api_domain'] : null;
        $this->container['enable_id_verification'] = isset($data['enable_id_verification']) ? $data['enable_id_verification'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['min_allowed_balance'] === null) {
            $invalidProperties[] = "'min_allowed_balance' can't be null";
        }
        if (($this->container['min_allowed_balance'] > 0)) {
            $invalidProperties[] = "invalid value for 'min_allowed_balance', must be smaller than or equal to 0.";
        }

        if (($this->container['min_allowed_balance'] < -1E+6)) {
            $invalidProperties[] = "invalid value for 'min_allowed_balance', must be bigger than or equal to -1E+6.";
        }

        if ($this->container['margin'] === null) {
            $invalidProperties[] = "'margin' can't be null";
        }
        if (($this->container['margin'] > 1)) {
            $invalidProperties[] = "invalid value for 'margin', must be smaller than or equal to 1.";
        }

        if (($this->container['margin'] < 0)) {
            $invalidProperties[] = "invalid value for 'margin', must be bigger than or equal to 0.";
        }

        if ($this->container['owner_exchange_commission'] === null) {
            $invalidProperties[] = "'owner_exchange_commission' can't be null";
        }
        if (($this->container['owner_exchange_commission'] > 1)) {
            $invalidProperties[] = "invalid value for 'owner_exchange_commission', must be smaller than or equal to 1.";
        }

        if (($this->container['owner_exchange_commission'] < 0)) {
            $invalidProperties[] = "invalid value for 'owner_exchange_commission', must be bigger than or equal to 0.";
        }

        if ($this->container['ui_domain'] === null) {
            $invalidProperties[] = "'ui_domain' can't be null";
        }
        if ((mb_strlen($this->container['ui_domain']) > 255)) {
            $invalidProperties[] = "invalid value for 'ui_domain', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['ui_domain']) < 1)) {
            $invalidProperties[] = "invalid value for 'ui_domain', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['api_domain']) && (mb_strlen($this->container['api_domain']) > 255)) {
            $invalidProperties[] = "invalid value for 'api_domain', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['api_domain']) && (mb_strlen($this->container['api_domain']) < 1)) {
            $invalidProperties[] = "invalid value for 'api_domain', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['platform']) && ($this->container['platform'] > 1)) {
            $invalidProperties[] = "invalid value for 'platform', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['platform']) && ($this->container['platform'] < 0)) {
            $invalidProperties[] = "invalid value for 'platform', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name Organizatiton
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return float
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param float $active Status. 1 - Active, 0 - Pause. One of the ID values of parameter `statuses` in /constants is added to this parameter
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets min_allowed_balance
     *
     * @return float
     */
    public function getMinAllowedBalance()
    {
        return $this->container['min_allowed_balance'];
    }

    /**
     * Sets min_allowed_balance
     *
     * @param float $min_allowed_balance Credit
     *
     * @return $this
     */
    public function setMinAllowedBalance($min_allowed_balance)
    {

        if (($min_allowed_balance > 0)) {
            throw new \InvalidArgumentException('invalid value for $min_allowed_balance when calling NewOrganization., must be smaller than or equal to 0.');
        }

        $this->container['min_allowed_balance'] = $min_allowed_balance;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float $margin Margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {

        if (($margin > 1)) {
            throw new \InvalidArgumentException('invalid value for $margin when calling NewOrganization., must be smaller than or equal to 1.');
        }

        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets owner_exchange_commission
     *
     * @return float
     */
    public function getOwnerExchangeCommission()
    {
        return $this->container['owner_exchange_commission'];
    }

    /**
     * Sets owner_exchange_commission
     *
     * @param float $owner_exchange_commission Owner Exchange Commission
     *
     * @return $this
     */
    public function setOwnerExchangeCommission($owner_exchange_commission)
    {

        if (($owner_exchange_commission > 1)) {
            throw new \InvalidArgumentException('invalid value for $owner_exchange_commission when calling NewOrganization., must be smaller than or equal to 1.');
        }

        $this->container['owner_exchange_commission'] = $owner_exchange_commission;

        return $this;
    }

    /**
     * Gets ui_domain
     *
     * @return string
     */
    public function getUiDomain()
    {
        return $this->container['ui_domain'];
    }

    /**
     * Sets ui_domain
     *
     * @param string $ui_domain UI Domain
     *
     * @return $this
     */
    public function setUiDomain($ui_domain)
    {
        if ((mb_strlen($ui_domain) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ui_domain when calling NewOrganization., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($ui_domain) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ui_domain when calling NewOrganization., must be bigger than or equal to 1.');
        }

        $this->container['ui_domain'] = $ui_domain;

        return $this;
    }

    /**
     * Gets api_domain
     *
     * @return string|null
     */
    public function getApiDomain()
    {
        return $this->container['api_domain'];
    }

    /**
     * Sets api_domain
     *
     * @param string|null $api_domain API Domain
     *
     * @return $this
     */
    public function setApiDomain($api_domain)
    {
        if (!is_null($api_domain) && (mb_strlen($api_domain) > 255)) {
            throw new \InvalidArgumentException('invalid length for $api_domain when calling NewOrganization., must be smaller than or equal to 255.');
        }
        if (!is_null($api_domain) && (mb_strlen($api_domain) < 1)) {
            throw new \InvalidArgumentException('invalid length for $api_domain when calling NewOrganization., must be bigger than or equal to 1.');
        }

        $this->container['api_domain'] = $api_domain;

        return $this;
    }

    /**
     * Gets enable_id_verification
     *
     * @return bool|null
     */
    public function getEnableIdVerification()
    {
        return $this->container['enable_id_verification'];
    }

    /**
     * Sets enable_id_verification
     *
     * @param bool|null $enable_id_verification Enable ID Verification for subdomain users
     *
     * @return $this
     */
    public function setEnableIdVerification($enable_id_verification)
    {
        $this->container['enable_id_verification'] = $enable_id_verification;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return float|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param float|null $platform Platform type
     *
     * @return $this
     */
    public function setPlatform($platform)
    {

        if (!is_null($platform) && ($platform > 1)) {
            throw new \InvalidArgumentException('invalid value for $platform when calling NewOrganization., must be smaller than or equal to 1.');
        }

        $this->container['platform'] = $platform;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



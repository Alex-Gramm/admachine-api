<?php
/**
 * BonusInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BonusInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BonusInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BonusInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_funds' => 'bool',
        'create_ad' => 'bool',
        'create_campaign' => 'bool',
        'set_up_conversion_tracking' => 'bool',
        'create_ad_set' => 'bool',
        'assign_ad_to_ad_set' => 'bool',
        'start_spending' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'add_funds' => null,
        'create_ad' => null,
        'create_campaign' => null,
        'set_up_conversion_tracking' => null,
        'create_ad_set' => null,
        'assign_ad_to_ad_set' => null,
        'start_spending' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_funds' => 'add_funds',
        'create_ad' => 'create_ad',
        'create_campaign' => 'create_campaign',
        'set_up_conversion_tracking' => 'set_up_conversion_tracking',
        'create_ad_set' => 'create_ad_set',
        'assign_ad_to_ad_set' => 'assign_ad_to_ad_set',
        'start_spending' => 'start_spending'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_funds' => 'setAddFunds',
        'create_ad' => 'setCreateAd',
        'create_campaign' => 'setCreateCampaign',
        'set_up_conversion_tracking' => 'setSetUpConversionTracking',
        'create_ad_set' => 'setCreateAdSet',
        'assign_ad_to_ad_set' => 'setAssignAdToAdSet',
        'start_spending' => 'setStartSpending'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_funds' => 'getAddFunds',
        'create_ad' => 'getCreateAd',
        'create_campaign' => 'getCreateCampaign',
        'set_up_conversion_tracking' => 'getSetUpConversionTracking',
        'create_ad_set' => 'getCreateAdSet',
        'assign_ad_to_ad_set' => 'getAssignAdToAdSet',
        'start_spending' => 'getStartSpending'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_funds'] = isset($data['add_funds']) ? $data['add_funds'] : null;
        $this->container['create_ad'] = isset($data['create_ad']) ? $data['create_ad'] : null;
        $this->container['create_campaign'] = isset($data['create_campaign']) ? $data['create_campaign'] : null;
        $this->container['set_up_conversion_tracking'] = isset($data['set_up_conversion_tracking']) ? $data['set_up_conversion_tracking'] : null;
        $this->container['create_ad_set'] = isset($data['create_ad_set']) ? $data['create_ad_set'] : null;
        $this->container['assign_ad_to_ad_set'] = isset($data['assign_ad_to_ad_set']) ? $data['assign_ad_to_ad_set'] : null;
        $this->container['start_spending'] = isset($data['start_spending']) ? $data['start_spending'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_funds
     *
     * @return bool|null
     */
    public function getAddFunds()
    {
        return $this->container['add_funds'];
    }

    /**
     * Sets add_funds
     *
     * @param bool|null $add_funds add_funds
     *
     * @return $this
     */
    public function setAddFunds($add_funds)
    {
        $this->container['add_funds'] = $add_funds;

        return $this;
    }

    /**
     * Gets create_ad
     *
     * @return bool|null
     */
    public function getCreateAd()
    {
        return $this->container['create_ad'];
    }

    /**
     * Sets create_ad
     *
     * @param bool|null $create_ad create_ad
     *
     * @return $this
     */
    public function setCreateAd($create_ad)
    {
        $this->container['create_ad'] = $create_ad;

        return $this;
    }

    /**
     * Gets create_campaign
     *
     * @return bool|null
     */
    public function getCreateCampaign()
    {
        return $this->container['create_campaign'];
    }

    /**
     * Sets create_campaign
     *
     * @param bool|null $create_campaign create_campaign
     *
     * @return $this
     */
    public function setCreateCampaign($create_campaign)
    {
        $this->container['create_campaign'] = $create_campaign;

        return $this;
    }

    /**
     * Gets set_up_conversion_tracking
     *
     * @return bool|null
     */
    public function getSetUpConversionTracking()
    {
        return $this->container['set_up_conversion_tracking'];
    }

    /**
     * Sets set_up_conversion_tracking
     *
     * @param bool|null $set_up_conversion_tracking set_up_conversion_tracking
     *
     * @return $this
     */
    public function setSetUpConversionTracking($set_up_conversion_tracking)
    {
        $this->container['set_up_conversion_tracking'] = $set_up_conversion_tracking;

        return $this;
    }

    /**
     * Gets create_ad_set
     *
     * @return bool|null
     */
    public function getCreateAdSet()
    {
        return $this->container['create_ad_set'];
    }

    /**
     * Sets create_ad_set
     *
     * @param bool|null $create_ad_set create_ad_set
     *
     * @return $this
     */
    public function setCreateAdSet($create_ad_set)
    {
        $this->container['create_ad_set'] = $create_ad_set;

        return $this;
    }

    /**
     * Gets assign_ad_to_ad_set
     *
     * @return bool|null
     */
    public function getAssignAdToAdSet()
    {
        return $this->container['assign_ad_to_ad_set'];
    }

    /**
     * Sets assign_ad_to_ad_set
     *
     * @param bool|null $assign_ad_to_ad_set assign_ad_to_ad_set
     *
     * @return $this
     */
    public function setAssignAdToAdSet($assign_ad_to_ad_set)
    {
        $this->container['assign_ad_to_ad_set'] = $assign_ad_to_ad_set;

        return $this;
    }

    /**
     * Gets start_spending
     *
     * @return bool|null
     */
    public function getStartSpending()
    {
        return $this->container['start_spending'];
    }

    /**
     * Sets start_spending
     *
     * @param bool|null $start_spending Optional
     *
     * @return $this
     */
    public function setStartSpending($start_spending)
    {
        $this->container['start_spending'] = $start_spending;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * CreativesApi
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CreativesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreativesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation creativesAudienceCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesAudienceCreativeIdDelete($creative_id)
    {
        $this->creativesAudienceCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesAudienceCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesAudienceCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesAudienceCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/audience/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCreativeIdGet
     *
     * Pops Audience
     *
     * @param  float $creative_id The numerical ID of Audience Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudienceCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesAudienceCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesAudienceCreativeIdGetWithHttpInfo
     *
     * Pops Audience
     *
     * @param  float $creative_id The numerical ID of Audience Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCreativeIdGetAsync
     *
     * Pops Audience
     *
     * @param  float $creative_id The numerical ID of Audience Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdGetAsync($creative_id)
    {
        return $this->creativesAudienceCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCreativeIdGetAsyncWithHttpInfo
     *
     * Pops Audience
     *
     * @param  float $creative_id The numerical ID of Audience Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudienceCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Audience Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/audience/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCreativeIdPut
     *
     * Update a Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Audience object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudienceCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesAudienceCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesAudienceCreativeIdPutWithHttpInfo
     *
     * Update a Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Audience object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesAudienceCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCreativeIdPutAsync
     *
     * Update a Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesAudienceCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudienceCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudienceCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/audience/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesAudienceCustomCreativeIdDelete($creative_id)
    {
        $this->creativesAudienceCustomCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesAudienceCustomCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCustomCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceCustomCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCustomCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesAudienceCustomCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesAudienceCustomCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCustomCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCustomCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCustomCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/audience_custom/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdGet
     *
     * Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2005Data
     */
    public function creativesAudienceCustomCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesAudienceCustomCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesAudienceCustomCreativeIdGetWithHttpInfo
     *
     * Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2005Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCustomCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceCustomCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2005Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2005Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2005Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCustomCreativeIdGetAsync
     *
     * Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdGetAsync($creative_id)
    {
        return $this->creativesAudienceCustomCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdGetAsyncWithHttpInfo
     *
     * Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
        $request = $this->creativesAudienceCustomCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCustomCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCustomCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCustomCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/audience_custom/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdPut
     *
     * Update a Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\InlineObject1 $body body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2005Data
     */
    public function creativesAudienceCustomCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesAudienceCustomCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesAudienceCustomCreativeIdPutWithHttpInfo
     *
     * Update a Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\InlineObject1 $body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2005Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCustomCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesAudienceCustomCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2005Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2005Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2005Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCustomCreativeIdPutAsync
     *
     * Update a Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\InlineObject1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesAudienceCustomCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCustomCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Custom Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\InlineObject1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
        $request = $this->creativesAudienceCustomCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCustomCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\InlineObject1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCustomCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceCustomCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudienceCustomCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/audience_custom/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCustomGet
     *
     * All Custom Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2005
     */
    public function creativesAudienceCustomGet($limit, $offset)
    {
        list($response) = $this->creativesAudienceCustomGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesAudienceCustomGetWithHttpInfo
     *
     * All Custom Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCustomGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesAudienceCustomGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2005';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCustomGetAsync
     *
     * All Custom Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomGetAsync($limit, $offset)
    {
        return $this->creativesAudienceCustomGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCustomGetAsyncWithHttpInfo
     *
     * All Custom Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2005';
        $request = $this->creativesAudienceCustomGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCustomGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCustomGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesAudienceCustomGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesAudienceCustomGet'
            );
        }

        $resourcePath = '/creatives/audience_custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceCustomPost
     *
     * Create a new Custom Audience Creative
     *
     * @param  \OpenAPI\Client\Model\InlineObject $body body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2005Data
     */
    public function creativesAudienceCustomPost($body)
    {
        list($response) = $this->creativesAudienceCustomPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesAudienceCustomPostWithHttpInfo
     *
     * Create a new Custom Audience Creative
     *
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2005Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceCustomPostWithHttpInfo($body)
    {
        $request = $this->creativesAudienceCustomPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\InlineResponse2005Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2005Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2005Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceCustomPostAsync
     *
     * Create a new Custom Audience Creative
     *
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomPostAsync($body)
    {
        return $this->creativesAudienceCustomPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceCustomPostAsyncWithHttpInfo
     *
     * Create a new Custom Audience Creative
     *
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceCustomPostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2005Data';
        $request = $this->creativesAudienceCustomPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceCustomPost'
     *
     * @param  \OpenAPI\Client\Model\InlineObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceCustomPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudienceCustomPost'
            );
        }

        $resourcePath = '/creatives/audience_custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceGet
     *
     * All Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesPops
     */
    public function creativesAudienceGet($limit, $offset)
    {
        list($response) = $this->creativesAudienceGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesAudienceGetWithHttpInfo
     *
     * All Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesPops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesAudienceGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesPops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesPops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesPops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesPops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceGetAsync
     *
     * All Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceGetAsync($limit, $offset)
    {
        return $this->creativesAudienceGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceGetAsyncWithHttpInfo
     *
     * All Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesPops';
        $request = $this->creativesAudienceGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesAudienceGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesAudienceGet'
            );
        }

        $resourcePath = '/creatives/audience';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudiencePost
     *
     * Create a new Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Audience (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudiencePost($body)
    {
        list($response) = $this->creativesAudiencePostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesAudiencePostWithHttpInfo
     *
     * Create a new Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Audience (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudiencePostWithHttpInfo($body)
    {
        $request = $this->creativesAudiencePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudiencePostAsync
     *
     * Create a new Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudiencePostAsync($body)
    {
        return $this->creativesAudiencePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudiencePostAsyncWithHttpInfo
     *
     * Create a new Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudiencePostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudiencePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudiencePost'
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudiencePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudiencePost'
            );
        }

        $resourcePath = '/creatives/audience';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesAudienceVerifiedCreativeIdDelete($creative_id)
    {
        $this->creativesAudienceVerifiedCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceVerifiedCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceVerifiedCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesAudienceVerifiedCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesAudienceVerifiedCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceVerifiedCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceVerifiedCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceVerifiedCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/audience_verified/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdGet
     *
     * Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudienceVerifiedCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesAudienceVerifiedCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdGetWithHttpInfo
     *
     * Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceVerifiedCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesAudienceVerifiedCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdGetAsync
     *
     * Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdGetAsync($creative_id)
    {
        return $this->creativesAudienceVerifiedCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdGetAsyncWithHttpInfo
     *
     * Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudienceVerifiedCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceVerifiedCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceVerifiedCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceVerifiedCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/audience_verified/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdPut
     *
     * Update a Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Verified Audience object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudienceVerifiedCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesAudienceVerifiedCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdPutWithHttpInfo
     *
     * Update a Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Verified Audience object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceVerifiedCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesAudienceVerifiedCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdPutAsync
     *
     * Update a Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Verified Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesAudienceVerifiedCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceVerifiedCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Verified Audience Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Verified Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudienceVerifiedCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceVerifiedCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Verified Audience object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceVerifiedCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesAudienceVerifiedCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudienceVerifiedCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/audience_verified/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceVerifiedGet
     *
     * All Verified Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesPops
     */
    public function creativesAudienceVerifiedGet($limit, $offset)
    {
        list($response) = $this->creativesAudienceVerifiedGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesAudienceVerifiedGetWithHttpInfo
     *
     * All Verified Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesPops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceVerifiedGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesAudienceVerifiedGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesPops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesPops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesPops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesPops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceVerifiedGetAsync
     *
     * All Verified Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedGetAsync($limit, $offset)
    {
        return $this->creativesAudienceVerifiedGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceVerifiedGetAsyncWithHttpInfo
     *
     * All Verified Audience Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesPops';
        $request = $this->creativesAudienceVerifiedGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceVerifiedGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceVerifiedGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesAudienceVerifiedGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesAudienceVerifiedGet'
            );
        }

        $resourcePath = '/creatives/audience_verified';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesAudienceVerifiedPost
     *
     * Create a new Verified Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Verified Audience (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesAudienceVerifiedPost($body)
    {
        list($response) = $this->creativesAudienceVerifiedPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesAudienceVerifiedPostWithHttpInfo
     *
     * Create a new Verified Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Verified Audience (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesAudienceVerifiedPostWithHttpInfo($body)
    {
        $request = $this->creativesAudienceVerifiedPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesAudienceVerifiedPostAsync
     *
     * Create a new Verified Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Verified Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedPostAsync($body)
    {
        return $this->creativesAudienceVerifiedPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesAudienceVerifiedPostAsyncWithHttpInfo
     *
     * Create a new Verified Audience Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Verified Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesAudienceVerifiedPostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesAudienceVerifiedPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesAudienceVerifiedPost'
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Verified Audience (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesAudienceVerifiedPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesAudienceVerifiedPost'
            );
        }

        $resourcePath = '/creatives/audience_verified';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdApprovalsGet
     *
     * Get All Creative Approvals
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Approvals
     */
    public function creativesCreativeIdApprovalsGet($creative_id)
    {
        list($response) = $this->creativesCreativeIdApprovalsGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesCreativeIdApprovalsGetWithHttpInfo
     *
     * Get All Creative Approvals
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Approvals, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdApprovalsGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesCreativeIdApprovalsGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Approvals' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Approvals', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Approvals';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Approvals',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdApprovalsGetAsync
     *
     * Get All Creative Approvals
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdApprovalsGetAsync($creative_id)
    {
        return $this->creativesCreativeIdApprovalsGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdApprovalsGetAsyncWithHttpInfo
     *
     * Get All Creative Approvals
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdApprovalsGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\Approvals';
        $request = $this->creativesCreativeIdApprovalsGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdApprovalsGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdApprovalsGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdApprovalsGet'
            );
        }

        $resourcePath = '/creatives/{creative_id}/approvals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdCompanionsGet
     *
     * Get All Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function creativesCreativeIdCompanionsGet($creative_id)
    {
        list($response) = $this->creativesCreativeIdCompanionsGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesCreativeIdCompanionsGetWithHttpInfo
     *
     * Get All Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdCompanionsGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesCreativeIdCompanionsGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('int[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdCompanionsGetAsync
     *
     * Get All Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdCompanionsGetAsync($creative_id)
    {
        return $this->creativesCreativeIdCompanionsGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdCompanionsGetAsyncWithHttpInfo
     *
     * Get All Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdCompanionsGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = 'int[]';
        $request = $this->creativesCreativeIdCompanionsGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdCompanionsGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdCompanionsGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdCompanionsGet'
            );
        }

        $resourcePath = '/creatives/{creative_id}/companions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdCompanionsPost
     *
     * Add Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  int[] $body Creative companions IDs (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function creativesCreativeIdCompanionsPost($creative_id, $body)
    {
        list($response) = $this->creativesCreativeIdCompanionsPostWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesCreativeIdCompanionsPostWithHttpInfo
     *
     * Add Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  int[] $body Creative companions IDs (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdCompanionsPostWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesCreativeIdCompanionsPostRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('int[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdCompanionsPostAsync
     *
     * Add Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  int[] $body Creative companions IDs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdCompanionsPostAsync($creative_id, $body)
    {
        return $this->creativesCreativeIdCompanionsPostAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdCompanionsPostAsyncWithHttpInfo
     *
     * Add Creative Companions IDs
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  int[] $body Creative companions IDs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdCompanionsPostAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = 'int[]';
        $request = $this->creativesCreativeIdCompanionsPostRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdCompanionsPost'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  int[] $body Creative companions IDs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdCompanionsPostRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdCompanionsPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesCreativeIdCompanionsPost'
            );
        }

        $resourcePath = '/creatives/{creative_id}/companions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersDelete
     *
     * Delete Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesCreativeIdTrackersDelete($creative_id)
    {
        $this->creativesCreativeIdTrackersDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesCreativeIdTrackersDeleteWithHttpInfo
     *
     * Delete Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesCreativeIdTrackersDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersDeleteAsync
     *
     * Delete Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersDeleteAsync($creative_id)
    {
        return $this->creativesCreativeIdTrackersDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersDeleteAsyncWithHttpInfo
     *
     * Delete Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesCreativeIdTrackersDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersDelete'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersGet
     *
     * Get All Creative Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EventTrackers
     */
    public function creativesCreativeIdTrackersGet($creative_id, $limit, $offset)
    {
        list($response) = $this->creativesCreativeIdTrackersGetWithHttpInfo($creative_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation creativesCreativeIdTrackersGetWithHttpInfo
     *
     * Get All Creative Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EventTrackers, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersGetWithHttpInfo($creative_id, $limit, $offset)
    {
        $request = $this->creativesCreativeIdTrackersGetRequest($creative_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EventTrackers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EventTrackers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EventTrackers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EventTrackers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersGetAsync
     *
     * Get All Creative Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersGetAsync($creative_id, $limit, $offset)
    {
        return $this->creativesCreativeIdTrackersGetAsyncWithHttpInfo($creative_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersGetAsyncWithHttpInfo
     *
     * Get All Creative Event Trackers
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersGetAsyncWithHttpInfo($creative_id, $limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\EventTrackers';
        $request = $this->creativesCreativeIdTrackersGetRequest($creative_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersGetRequest($creative_id, $limit, $offset)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersGet'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesCreativeIdTrackersGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesCreativeIdTrackersGet'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }


        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersPost
     *
     * Add Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\NewEventTracker $body Created Event Tracker object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EventTrackers
     */
    public function creativesCreativeIdTrackersPost($creative_id, $body)
    {
        list($response) = $this->creativesCreativeIdTrackersPostWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesCreativeIdTrackersPostWithHttpInfo
     *
     * Add Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\NewEventTracker $body Created Event Tracker object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EventTrackers, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersPostWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesCreativeIdTrackersPostRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\EventTrackers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EventTrackers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EventTrackers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EventTrackers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersPostAsync
     *
     * Add Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\NewEventTracker $body Created Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersPostAsync($creative_id, $body)
    {
        return $this->creativesCreativeIdTrackersPostAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersPostAsyncWithHttpInfo
     *
     * Add Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\NewEventTracker $body Created Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersPostAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\EventTrackers';
        $request = $this->creativesCreativeIdTrackersPostRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersPost'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\NewEventTracker $body Created Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersPostRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesCreativeIdTrackersPost'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdDelete
     *
     * Delete Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesCreativeIdTrackersTrackerIdDelete($creative_id, $tracker_id)
    {
        $this->creativesCreativeIdTrackersTrackerIdDeleteWithHttpInfo($creative_id, $tracker_id);
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdDeleteWithHttpInfo
     *
     * Delete Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersTrackerIdDeleteWithHttpInfo($creative_id, $tracker_id)
    {
        $request = $this->creativesCreativeIdTrackersTrackerIdDeleteRequest($creative_id, $tracker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdDeleteAsync
     *
     * Delete Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdDeleteAsync($creative_id, $tracker_id)
    {
        return $this->creativesCreativeIdTrackersTrackerIdDeleteAsyncWithHttpInfo($creative_id, $tracker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdDeleteAsyncWithHttpInfo
     *
     * Delete Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdDeleteAsyncWithHttpInfo($creative_id, $tracker_id)
    {
        $returnType = '';
        $request = $this->creativesCreativeIdTrackersTrackerIdDeleteRequest($creative_id, $tracker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersTrackerIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersTrackerIdDeleteRequest($creative_id, $tracker_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersTrackerIdDelete'
            );
        }
        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling creativesCreativeIdTrackersTrackerIdDelete'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers/{tracker_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }
        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tracker_id' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdGet
     *
     * Get Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EventTracker
     */
    public function creativesCreativeIdTrackersTrackerIdGet($creative_id, $tracker_id)
    {
        list($response) = $this->creativesCreativeIdTrackersTrackerIdGetWithHttpInfo($creative_id, $tracker_id);
        return $response;
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdGetWithHttpInfo
     *
     * Get Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EventTracker, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersTrackerIdGetWithHttpInfo($creative_id, $tracker_id)
    {
        $request = $this->creativesCreativeIdTrackersTrackerIdGetRequest($creative_id, $tracker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EventTracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EventTracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EventTracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EventTracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdGetAsync
     *
     * Get Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdGetAsync($creative_id, $tracker_id)
    {
        return $this->creativesCreativeIdTrackersTrackerIdGetAsyncWithHttpInfo($creative_id, $tracker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdGetAsyncWithHttpInfo
     *
     * Get Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdGetAsyncWithHttpInfo($creative_id, $tracker_id)
    {
        $returnType = '\OpenAPI\Client\Model\EventTracker';
        $request = $this->creativesCreativeIdTrackersTrackerIdGetRequest($creative_id, $tracker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersTrackerIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersTrackerIdGetRequest($creative_id, $tracker_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersTrackerIdGet'
            );
        }
        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling creativesCreativeIdTrackersTrackerIdGet'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers/{tracker_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }
        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tracker_id' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdPut
     *
     * Update Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     * @param  \OpenAPI\Client\Model\EditEventTracker $body Updated Event Tracker object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EventTracker
     */
    public function creativesCreativeIdTrackersTrackerIdPut($creative_id, $tracker_id, $body)
    {
        list($response) = $this->creativesCreativeIdTrackersTrackerIdPutWithHttpInfo($creative_id, $tracker_id, $body);
        return $response;
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdPutWithHttpInfo
     *
     * Update Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     * @param  \OpenAPI\Client\Model\EditEventTracker $body Updated Event Tracker object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EventTracker, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesCreativeIdTrackersTrackerIdPutWithHttpInfo($creative_id, $tracker_id, $body)
    {
        $request = $this->creativesCreativeIdTrackersTrackerIdPutRequest($creative_id, $tracker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EventTracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EventTracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EventTracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EventTracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdPutAsync
     *
     * Update Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     * @param  \OpenAPI\Client\Model\EditEventTracker $body Updated Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdPutAsync($creative_id, $tracker_id, $body)
    {
        return $this->creativesCreativeIdTrackersTrackerIdPutAsyncWithHttpInfo($creative_id, $tracker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesCreativeIdTrackersTrackerIdPutAsyncWithHttpInfo
     *
     * Update Event Tracker
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     * @param  \OpenAPI\Client\Model\EditEventTracker $body Updated Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesCreativeIdTrackersTrackerIdPutAsyncWithHttpInfo($creative_id, $tracker_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\EventTracker';
        $request = $this->creativesCreativeIdTrackersTrackerIdPutRequest($creative_id, $tracker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesCreativeIdTrackersTrackerIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  float $tracker_id The numerical ID of Event Tracker (required)
     * @param  \OpenAPI\Client\Model\EditEventTracker $body Updated Event Tracker object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesCreativeIdTrackersTrackerIdPutRequest($creative_id, $tracker_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesCreativeIdTrackersTrackerIdPut'
            );
        }
        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling creativesCreativeIdTrackersTrackerIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesCreativeIdTrackersTrackerIdPut'
            );
        }

        $resourcePath = '/creatives/{creative_id}/trackers/{tracker_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }
        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tracker_id' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesDisplay1pasCreativeIdDelete($creative_id)
    {
        $this->creativesDisplay1pasCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesDisplay1pasCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay1pasCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesDisplay1pasCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay1pasCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesDisplay1pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesDisplay1pasCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay1pasCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay1pasCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay1pasCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/display/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdGet
     *
     * 1PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeDisplay1pas
     */
    public function creativesDisplay1pasCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesDisplay1pasCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesDisplay1pasCreativeIdGetWithHttpInfo
     *
     * 1PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeDisplay1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay1pasCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesDisplay1pasCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeDisplay1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeDisplay1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeDisplay1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeDisplay1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay1pasCreativeIdGetAsync
     *
     * 1PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdGetAsync($creative_id)
    {
        return $this->creativesDisplay1pasCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdGetAsyncWithHttpInfo
     *
     * 1PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeDisplay1pas';
        $request = $this->creativesDisplay1pasCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay1pasCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay1pasCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay1pasCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/display/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdPut
     *
     * Update a Display 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  float $size Dimension (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesDisplay1pas
     */
    public function creativesDisplay1pasCreativeIdPut($creative_id, $name = null, $active = null, $iab_attr = null, $image_attachment = null, $size = null, $display_width = null, $display_height = null, $destination_url = null, $macros_custom_data = null)
    {
        list($response) = $this->creativesDisplay1pasCreativeIdPutWithHttpInfo($creative_id, $name, $active, $iab_attr, $image_attachment, $size, $display_width, $display_height, $destination_url, $macros_custom_data);
        return $response;
    }

    /**
     * Operation creativesDisplay1pasCreativeIdPutWithHttpInfo
     *
     * Update a Display 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  float $size Dimension (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesDisplay1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay1pasCreativeIdPutWithHttpInfo($creative_id, $name = null, $active = null, $iab_attr = null, $image_attachment = null, $size = null, $display_width = null, $display_height = null, $destination_url = null, $macros_custom_data = null)
    {
        $request = $this->creativesDisplay1pasCreativeIdPutRequest($creative_id, $name, $active, $iab_attr, $image_attachment, $size, $display_width, $display_height, $destination_url, $macros_custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativesDisplay1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesDisplay1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesDisplay1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesDisplay1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay1pasCreativeIdPutAsync
     *
     * Update a Display 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  float $size Dimension (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdPutAsync($creative_id, $name = null, $active = null, $iab_attr = null, $image_attachment = null, $size = null, $display_width = null, $display_height = null, $destination_url = null, $macros_custom_data = null)
    {
        return $this->creativesDisplay1pasCreativeIdPutAsyncWithHttpInfo($creative_id, $name, $active, $iab_attr, $image_attachment, $size, $display_width, $display_height, $destination_url, $macros_custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay1pasCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Display 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  float $size Dimension (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasCreativeIdPutAsyncWithHttpInfo($creative_id, $name = null, $active = null, $iab_attr = null, $image_attachment = null, $size = null, $display_width = null, $display_height = null, $destination_url = null, $macros_custom_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesDisplay1pas';
        $request = $this->creativesDisplay1pasCreativeIdPutRequest($creative_id, $name, $active, $iab_attr, $image_attachment, $size, $display_width, $display_height, $destination_url, $macros_custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay1pasCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  float $size Dimension (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay1pasCreativeIdPutRequest($creative_id, $name = null, $active = null, $iab_attr = null, $image_attachment = null, $size = null, $display_width = null, $display_height = null, $destination_url = null, $macros_custom_data = null)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay1pasCreativeIdPut'
            );
        }
        if ($display_width !== null && $display_width > 10000) {
            throw new \InvalidArgumentException('invalid value for "$display_width" when calling CreativesApi.creativesDisplay1pasCreativeIdPut, must be smaller than or equal to 10000.');
        }
        if ($display_width !== null && $display_width < 1) {
            throw new \InvalidArgumentException('invalid value for "$display_width" when calling CreativesApi.creativesDisplay1pasCreativeIdPut, must be bigger than or equal to 1.');
        }

        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesDisplay1pasCreativeIdPut, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/display/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($size !== null) {
            $formParams['size'] = ObjectSerializer::toFormValue($size);
        }
        // form params
        if ($display_width !== null) {
            $formParams['display_width'] = ObjectSerializer::toFormValue($display_width);
        }
        // form params
        if ($display_height !== null) {
            $formParams['display_height'] = ObjectSerializer::toFormValue($display_height);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay1pasGet
     *
     * All 1PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesDisplay1pas
     */
    public function creativesDisplay1pasGet($limit, $offset)
    {
        list($response) = $this->creativesDisplay1pasGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesDisplay1pasGetWithHttpInfo
     *
     * All 1PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesDisplay1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay1pasGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesDisplay1pasGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesDisplay1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesDisplay1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesDisplay1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesDisplay1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay1pasGetAsync
     *
     * All 1PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasGetAsync($limit, $offset)
    {
        return $this->creativesDisplay1pasGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay1pasGetAsyncWithHttpInfo
     *
     * All 1PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesDisplay1pas';
        $request = $this->creativesDisplay1pasGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay1pasGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay1pasGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesDisplay1pasGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesDisplay1pasGet'
            );
        }

        $resourcePath = '/creatives/display/1pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay1pasPost
     *
     * Create a new Display 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  float $size Dimension (required)
     * @param  string $destination_url Click-through URL (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeDisplay1pas
     */
    public function creativesDisplay1pasPost($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr = null, $display_width = null, $display_height = null, $macros_custom_data = null)
    {
        list($response) = $this->creativesDisplay1pasPostWithHttpInfo($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr, $display_width, $display_height, $macros_custom_data);
        return $response;
    }

    /**
     * Operation creativesDisplay1pasPostWithHttpInfo
     *
     * Create a new Display 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  float $size Dimension (required)
     * @param  string $destination_url Click-through URL (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeDisplay1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay1pasPostWithHttpInfo($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr = null, $display_width = null, $display_height = null, $macros_custom_data = null)
    {
        $request = $this->creativesDisplay1pasPostRequest($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr, $display_width, $display_height, $macros_custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativeDisplay1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeDisplay1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeDisplay1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeDisplay1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay1pasPostAsync
     *
     * Create a new Display 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  float $size Dimension (required)
     * @param  string $destination_url Click-through URL (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasPostAsync($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr = null, $display_width = null, $display_height = null, $macros_custom_data = null)
    {
        return $this->creativesDisplay1pasPostAsyncWithHttpInfo($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr, $display_width, $display_height, $macros_custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay1pasPostAsyncWithHttpInfo
     *
     * Create a new Display 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  float $size Dimension (required)
     * @param  string $destination_url Click-through URL (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay1pasPostAsyncWithHttpInfo($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr = null, $display_width = null, $display_height = null, $macros_custom_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeDisplay1pas';
        $request = $this->creativesDisplay1pasPostRequest($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr, $display_width, $display_height, $macros_custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay1pasPost'
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.gif, .png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  float $size Dimension (required)
     * @param  string $destination_url Click-through URL (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $display_width Display Width. if size &#x3D; 0 - Required. (optional)
     * @param  float $display_height Display Height. if size &#x3D; 0 - Required. (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay1pasPostRequest($name, $user_id, $active, $image_attachment, $adomain, $size, $destination_url, $iab_attr = null, $display_width = null, $display_height = null, $macros_custom_data = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling creativesDisplay1pasPost'
            );
        }
        if ($name > 255) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesDisplay1pasPost, must be smaller than or equal to 255.');
        }
        if ($name < 1) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesDisplay1pasPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling creativesDisplay1pasPost'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling creativesDisplay1pasPost'
            );
        }
        // verify the required parameter 'image_attachment' is set
        if ($image_attachment === null || (is_array($image_attachment) && count($image_attachment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment when calling creativesDisplay1pasPost'
            );
        }
        // verify the required parameter 'adomain' is set
        if ($adomain === null || (is_array($adomain) && count($adomain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adomain when calling creativesDisplay1pasPost'
            );
        }
        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling creativesDisplay1pasPost'
            );
        }
        // verify the required parameter 'destination_url' is set
        if ($destination_url === null || (is_array($destination_url) && count($destination_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_url when calling creativesDisplay1pasPost'
            );
        }
        if ($display_width !== null && $display_width > 10000) {
            throw new \InvalidArgumentException('invalid value for "$display_width" when calling CreativesApi.creativesDisplay1pasPost, must be smaller than or equal to 10000.');
        }
        if ($display_width !== null && $display_width < 1) {
            throw new \InvalidArgumentException('invalid value for "$display_width" when calling CreativesApi.creativesDisplay1pasPost, must be bigger than or equal to 1.');
        }

        if ($display_height !== null && $display_height > 10000) {
            throw new \InvalidArgumentException('invalid value for "$display_height" when calling CreativesApi.creativesDisplay1pasPost, must be smaller than or equal to 10000.');
        }
        if ($display_height !== null && $display_height < 1) {
            throw new \InvalidArgumentException('invalid value for "$display_height" when calling CreativesApi.creativesDisplay1pasPost, must be bigger than or equal to 1.');
        }

        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesDisplay1pasPost, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/display/1pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($adomain !== null) {
            $formParams['adomain'] = ObjectSerializer::toFormValue($adomain);
        }
        // form params
        if ($size !== null) {
            $formParams['size'] = ObjectSerializer::toFormValue($size);
        }
        // form params
        if ($display_width !== null) {
            $formParams['display_width'] = ObjectSerializer::toFormValue($display_width);
        }
        // form params
        if ($display_height !== null) {
            $formParams['display_height'] = ObjectSerializer::toFormValue($display_height);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesDisplay3pasCreativeIdDelete($creative_id)
    {
        $this->creativesDisplay3pasCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesDisplay3pasCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay3pasCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesDisplay3pasCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay3pasCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesDisplay3pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesDisplay3pasCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay3pasCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay3pasCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay3pasCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/display/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdGet
     *
     * 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeDisplay3pas
     */
    public function creativesDisplay3pasCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesDisplay3pasCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesDisplay3pasCreativeIdGetWithHttpInfo
     *
     * 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeDisplay3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay3pasCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesDisplay3pasCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeDisplay3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeDisplay3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeDisplay3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeDisplay3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay3pasCreativeIdGetAsync
     *
     * 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdGetAsync($creative_id)
    {
        return $this->creativesDisplay3pasCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdGetAsyncWithHttpInfo
     *
     * 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeDisplay3pas';
        $request = $this->creativesDisplay3pasCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay3pasCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay3pasCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay3pasCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/display/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdPut
     *
     * Update 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeDisplay3pas $body Updated 3PAS Display Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesDisplay3pas
     */
    public function creativesDisplay3pasCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesDisplay3pasCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesDisplay3pasCreativeIdPutWithHttpInfo
     *
     * Update 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeDisplay3pas $body Updated 3PAS Display Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesDisplay3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay3pasCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesDisplay3pasCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesDisplay3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesDisplay3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesDisplay3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesDisplay3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay3pasCreativeIdPutAsync
     *
     * Update 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeDisplay3pas $body Updated 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesDisplay3pasCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay3pasCreativeIdPutAsyncWithHttpInfo
     *
     * Update 3PAS Display Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeDisplay3pas $body Updated 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesDisplay3pas';
        $request = $this->creativesDisplay3pasCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay3pasCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeDisplay3pas $body Updated 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay3pasCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesDisplay3pasCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesDisplay3pasCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/display/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay3pasGet
     *
     * All 3PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesDisplay3pas
     */
    public function creativesDisplay3pasGet($limit, $offset)
    {
        list($response) = $this->creativesDisplay3pasGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesDisplay3pasGetWithHttpInfo
     *
     * All 3PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesDisplay3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay3pasGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesDisplay3pasGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesDisplay3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesDisplay3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesDisplay3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesDisplay3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay3pasGetAsync
     *
     * All 3PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasGetAsync($limit, $offset)
    {
        return $this->creativesDisplay3pasGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay3pasGetAsyncWithHttpInfo
     *
     * All 3PAS Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesDisplay3pas';
        $request = $this->creativesDisplay3pasGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay3pasGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay3pasGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesDisplay3pasGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesDisplay3pasGet'
            );
        }

        $resourcePath = '/creatives/display/3pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplay3pasPost
     *
     * Create 3PAS Display Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeDisplay3pas $body Created 3PAS Display Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeDisplay3pas
     */
    public function creativesDisplay3pasPost($body)
    {
        list($response) = $this->creativesDisplay3pasPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesDisplay3pasPostWithHttpInfo
     *
     * Create 3PAS Display Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeDisplay3pas $body Created 3PAS Display Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeDisplay3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplay3pasPostWithHttpInfo($body)
    {
        $request = $this->creativesDisplay3pasPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativeDisplay3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeDisplay3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeDisplay3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeDisplay3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplay3pasPostAsync
     *
     * Create 3PAS Display Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeDisplay3pas $body Created 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasPostAsync($body)
    {
        return $this->creativesDisplay3pasPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplay3pasPostAsyncWithHttpInfo
     *
     * Create 3PAS Display Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeDisplay3pas $body Created 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplay3pasPostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeDisplay3pas';
        $request = $this->creativesDisplay3pasPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplay3pasPost'
     *
     * @param  \OpenAPI\Client\Model\NewCreativeDisplay3pas $body Created 3PAS Display Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplay3pasPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesDisplay3pasPost'
            );
        }

        $resourcePath = '/creatives/display/3pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesDisplayGet
     *
     * All Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Creatives
     */
    public function creativesDisplayGet($limit, $offset)
    {
        list($response) = $this->creativesDisplayGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesDisplayGetWithHttpInfo
     *
     * All Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Creatives, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesDisplayGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesDisplayGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Creatives' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Creatives', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Creatives';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Creatives',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesDisplayGetAsync
     *
     * All Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplayGetAsync($limit, $offset)
    {
        return $this->creativesDisplayGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesDisplayGetAsyncWithHttpInfo
     *
     * All Display Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesDisplayGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\Creatives';
        $request = $this->creativesDisplayGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesDisplayGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesDisplayGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesDisplayGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesDisplayGet'
            );
        }

        $resourcePath = '/creatives/display';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesNativeCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesNativeCreativeIdDelete($creative_id)
    {
        $this->creativesNativeCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesNativeCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesNativeCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesNativeCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesNativeCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesNativeCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesNativeCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesNativeCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesNativeCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesNativeCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesNativeCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/native/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesNativeCreativeIdGet
     *
     * Native Creative
     *
     * @param  float $creative_id The numerical ID of Native Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeNative
     */
    public function creativesNativeCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesNativeCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesNativeCreativeIdGetWithHttpInfo
     *
     * Native Creative
     *
     * @param  float $creative_id The numerical ID of Native Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeNative, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesNativeCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesNativeCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeNative' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeNative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeNative';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeNative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesNativeCreativeIdGetAsync
     *
     * Native Creative
     *
     * @param  float $creative_id The numerical ID of Native Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdGetAsync($creative_id)
    {
        return $this->creativesNativeCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesNativeCreativeIdGetAsyncWithHttpInfo
     *
     * Native Creative
     *
     * @param  float $creative_id The numerical ID of Native Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeNative';
        $request = $this->creativesNativeCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesNativeCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Native Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesNativeCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesNativeCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/native/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesNativeCreativeIdPut
     *
     * Update a Native Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $call_to_action Call To Action (optional)
     * @param  string $headline Headline (optional)
     * @param  string $description Description (optional)
     * @param  string $brand_name Brand Name (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeNative
     */
    public function creativesNativeCreativeIdPut($creative_id, $name = null, $active = null, $iab_attr = null, $call_to_action = null, $headline = null, $description = null, $brand_name = null, $destination_url = null, $macros_custom_data = null, $image_attachment = null, $image_attachment_logo = null, $image_type = null)
    {
        list($response) = $this->creativesNativeCreativeIdPutWithHttpInfo($creative_id, $name, $active, $iab_attr, $call_to_action, $headline, $description, $brand_name, $destination_url, $macros_custom_data, $image_attachment, $image_attachment_logo, $image_type);
        return $response;
    }

    /**
     * Operation creativesNativeCreativeIdPutWithHttpInfo
     *
     * Update a Native Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $call_to_action Call To Action (optional)
     * @param  string $headline Headline (optional)
     * @param  string $description Description (optional)
     * @param  string $brand_name Brand Name (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeNative, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesNativeCreativeIdPutWithHttpInfo($creative_id, $name = null, $active = null, $iab_attr = null, $call_to_action = null, $headline = null, $description = null, $brand_name = null, $destination_url = null, $macros_custom_data = null, $image_attachment = null, $image_attachment_logo = null, $image_type = null)
    {
        $request = $this->creativesNativeCreativeIdPutRequest($creative_id, $name, $active, $iab_attr, $call_to_action, $headline, $description, $brand_name, $destination_url, $macros_custom_data, $image_attachment, $image_attachment_logo, $image_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeNative' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeNative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeNative';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeNative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesNativeCreativeIdPutAsync
     *
     * Update a Native Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $call_to_action Call To Action (optional)
     * @param  string $headline Headline (optional)
     * @param  string $description Description (optional)
     * @param  string $brand_name Brand Name (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdPutAsync($creative_id, $name = null, $active = null, $iab_attr = null, $call_to_action = null, $headline = null, $description = null, $brand_name = null, $destination_url = null, $macros_custom_data = null, $image_attachment = null, $image_attachment_logo = null, $image_type = null)
    {
        return $this->creativesNativeCreativeIdPutAsyncWithHttpInfo($creative_id, $name, $active, $iab_attr, $call_to_action, $headline, $description, $brand_name, $destination_url, $macros_custom_data, $image_attachment, $image_attachment_logo, $image_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesNativeCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Native Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $call_to_action Call To Action (optional)
     * @param  string $headline Headline (optional)
     * @param  string $description Description (optional)
     * @param  string $brand_name Brand Name (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeCreativeIdPutAsyncWithHttpInfo($creative_id, $name = null, $active = null, $iab_attr = null, $call_to_action = null, $headline = null, $description = null, $brand_name = null, $destination_url = null, $macros_custom_data = null, $image_attachment = null, $image_attachment_logo = null, $image_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeNative';
        $request = $this->creativesNativeCreativeIdPutRequest($creative_id, $name, $active, $iab_attr, $call_to_action, $headline, $description, $brand_name, $destination_url, $macros_custom_data, $image_attachment, $image_attachment_logo, $image_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesNativeCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  float $call_to_action Call To Action (optional)
     * @param  string $headline Headline (optional)
     * @param  string $description Description (optional)
     * @param  string $brand_name Brand Name (optional)
     * @param  string $destination_url Click-through URL (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (optional)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesNativeCreativeIdPutRequest($creative_id, $name = null, $active = null, $iab_attr = null, $call_to_action = null, $headline = null, $description = null, $brand_name = null, $destination_url = null, $macros_custom_data = null, $image_attachment = null, $image_attachment_logo = null, $image_type = null)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesNativeCreativeIdPut'
            );
        }
        if ($name !== null && $name > 255) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 255.');
        }

        if ($headline !== null && $headline > 65) {
            throw new \InvalidArgumentException('invalid value for "$headline" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 65.');
        }

        if ($description !== null && $description > 255) {
            throw new \InvalidArgumentException('invalid value for "$description" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 255.');
        }

        if ($brand_name !== null && $brand_name > 64) {
            throw new \InvalidArgumentException('invalid value for "$brand_name" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 64.');
        }

        if ($destination_url !== null && $destination_url > 4096) {
            throw new \InvalidArgumentException('invalid value for "$destination_url" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 4096.');
        }

        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesNativeCreativeIdPut, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/native/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // form params
        if ($call_to_action !== null) {
            $formParams['call_to_action'] = ObjectSerializer::toFormValue($call_to_action);
        }
        // form params
        if ($headline !== null) {
            $formParams['headline'] = ObjectSerializer::toFormValue($headline);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($brand_name !== null) {
            $formParams['brand_name'] = ObjectSerializer::toFormValue($brand_name);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($image_attachment_logo !== null) {
            $multipart = true;
            $formParams['image_attachment_logo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment_logo), 'rb');
        }
        // form params
        if ($image_type !== null) {
            $formParams['image_type'] = ObjectSerializer::toFormValue($image_type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesNativeGet
     *
     * All Native Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesNative
     */
    public function creativesNativeGet($limit, $offset)
    {
        list($response) = $this->creativesNativeGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesNativeGetWithHttpInfo
     *
     * All Native Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesNative, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesNativeGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesNativeGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesNative' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesNative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesNative';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesNative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesNativeGetAsync
     *
     * All Native Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeGetAsync($limit, $offset)
    {
        return $this->creativesNativeGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesNativeGetAsyncWithHttpInfo
     *
     * All Native Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativeGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesNative';
        $request = $this->creativesNativeGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesNativeGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesNativeGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesNativeGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesNativeGet'
            );
        }

        $resourcePath = '/creatives/native';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesNativePost
     *
     * Create a new Native Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  float $call_to_action Call To Action (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $brand_name Brand Name (required)
     * @param  string $adomain Advertiser domain (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeNative
     */
    public function creativesNativePost($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr = null, $macros_custom_data = null)
    {
        list($response) = $this->creativesNativePostWithHttpInfo($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr, $macros_custom_data);
        return $response;
    }

    /**
     * Operation creativesNativePostWithHttpInfo
     *
     * Create a new Native Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  float $call_to_action Call To Action (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $brand_name Brand Name (required)
     * @param  string $adomain Advertiser domain (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeNative, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesNativePostWithHttpInfo($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr = null, $macros_custom_data = null)
    {
        $request = $this->creativesNativePostRequest($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr, $macros_custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativeNative' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeNative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeNative';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeNative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesNativePostAsync
     *
     * Create a new Native Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  float $call_to_action Call To Action (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $brand_name Brand Name (required)
     * @param  string $adomain Advertiser domain (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativePostAsync($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr = null, $macros_custom_data = null)
    {
        return $this->creativesNativePostAsyncWithHttpInfo($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr, $macros_custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesNativePostAsyncWithHttpInfo
     *
     * Create a new Native Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  float $call_to_action Call To Action (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $brand_name Brand Name (required)
     * @param  string $adomain Advertiser domain (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesNativePostAsyncWithHttpInfo($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr = null, $macros_custom_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeNative';
        $request = $this->creativesNativePostRequest($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr, $macros_custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesNativePost'
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  float $call_to_action Call To Action (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $brand_name Brand Name (required)
     * @param  string $adomain Advertiser domain (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  int $image_type Image Type. One of the ID values of parameter &#x60;creative_image_types&#x60; in /constants is added to this parameter. (required)
     * @param  float[] $iab_attr Creative Attributes (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesNativePostRequest($name, $user_id, $active, $call_to_action, $headline, $description, $brand_name, $adomain, $destination_url, $image_attachment, $image_attachment_logo, $image_type, $iab_attr = null, $macros_custom_data = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling creativesNativePost'
            );
        }
        if ($name > 255) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 255.');
        }
        if ($name < 1) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesNativePost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling creativesNativePost'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling creativesNativePost'
            );
        }
        // verify the required parameter 'call_to_action' is set
        if ($call_to_action === null || (is_array($call_to_action) && count($call_to_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_to_action when calling creativesNativePost'
            );
        }
        // verify the required parameter 'headline' is set
        if ($headline === null || (is_array($headline) && count($headline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headline when calling creativesNativePost'
            );
        }
        if ($headline > 65) {
            throw new \InvalidArgumentException('invalid value for "$headline" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 65.');
        }

        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling creativesNativePost'
            );
        }
        if ($description > 255) {
            throw new \InvalidArgumentException('invalid value for "$description" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 255.');
        }

        // verify the required parameter 'brand_name' is set
        if ($brand_name === null || (is_array($brand_name) && count($brand_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_name when calling creativesNativePost'
            );
        }
        if ($brand_name > 64) {
            throw new \InvalidArgumentException('invalid value for "$brand_name" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 64.');
        }

        // verify the required parameter 'adomain' is set
        if ($adomain === null || (is_array($adomain) && count($adomain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adomain when calling creativesNativePost'
            );
        }
        if ($adomain > 65) {
            throw new \InvalidArgumentException('invalid value for "$adomain" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 65.');
        }

        // verify the required parameter 'destination_url' is set
        if ($destination_url === null || (is_array($destination_url) && count($destination_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_url when calling creativesNativePost'
            );
        }
        if ($destination_url > 4096) {
            throw new \InvalidArgumentException('invalid value for "$destination_url" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 4096.');
        }

        // verify the required parameter 'image_attachment' is set
        if ($image_attachment === null || (is_array($image_attachment) && count($image_attachment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment when calling creativesNativePost'
            );
        }
        // verify the required parameter 'image_attachment_logo' is set
        if ($image_attachment_logo === null || (is_array($image_attachment_logo) && count($image_attachment_logo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment_logo when calling creativesNativePost'
            );
        }
        // verify the required parameter 'image_type' is set
        if ($image_type === null || (is_array($image_type) && count($image_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_type when calling creativesNativePost'
            );
        }
        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesNativePost, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/native';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // form params
        if ($call_to_action !== null) {
            $formParams['call_to_action'] = ObjectSerializer::toFormValue($call_to_action);
        }
        // form params
        if ($headline !== null) {
            $formParams['headline'] = ObjectSerializer::toFormValue($headline);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($brand_name !== null) {
            $formParams['brand_name'] = ObjectSerializer::toFormValue($brand_name);
        }
        // form params
        if ($adomain !== null) {
            $formParams['adomain'] = ObjectSerializer::toFormValue($adomain);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($image_attachment_logo !== null) {
            $multipart = true;
            $formParams['image_attachment_logo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment_logo), 'rb');
        }
        // form params
        if ($image_type !== null) {
            $formParams['image_type'] = ObjectSerializer::toFormValue($image_type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPopsCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesPopsCreativeIdDelete($creative_id)
    {
        $this->creativesPopsCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesPopsCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPopsCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesPopsCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPopsCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesPopsCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPopsCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesPopsCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPopsCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPopsCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPopsCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/pops/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPopsCreativeIdGet
     *
     * Pops Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesPopsCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesPopsCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesPopsCreativeIdGetWithHttpInfo
     *
     * Pops Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPopsCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesPopsCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPopsCreativeIdGetAsync
     *
     * Pops Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdGetAsync($creative_id)
    {
        return $this->creativesPopsCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPopsCreativeIdGetAsyncWithHttpInfo
     *
     * Pops Creative
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesPopsCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPopsCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Pops Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPopsCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPopsCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/pops/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPopsCreativeIdPut
     *
     * Update a Pops Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Pops object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesPopsCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesPopsCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesPopsCreativeIdPutWithHttpInfo
     *
     * Update a Pops Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Pops object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPopsCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesPopsCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPopsCreativeIdPutAsync
     *
     * Update a Pops Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Pops object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesPopsCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPopsCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Pops Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Pops object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesPopsCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPopsCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativePops $body Updated Creative Pops object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPopsCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPopsCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesPopsCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/pops/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPopsGet
     *
     * All Pops Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesPops
     */
    public function creativesPopsGet($limit, $offset)
    {
        list($response) = $this->creativesPopsGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesPopsGetWithHttpInfo
     *
     * All Pops Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesPops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPopsGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesPopsGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesPops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesPops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesPops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesPops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPopsGetAsync
     *
     * All Pops Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsGetAsync($limit, $offset)
    {
        return $this->creativesPopsGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPopsGetAsyncWithHttpInfo
     *
     * All Pops Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesPops';
        $request = $this->creativesPopsGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPopsGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPopsGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesPopsGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesPopsGet'
            );
        }

        $resourcePath = '/creatives/pops';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPopsPost
     *
     * Create a new Pops Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Pops (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativePops
     */
    public function creativesPopsPost($body)
    {
        list($response) = $this->creativesPopsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesPopsPostWithHttpInfo
     *
     * Create a new Pops Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Pops (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativePops, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPopsPostWithHttpInfo($body)
    {
        $request = $this->creativesPopsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativePops' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativePops', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativePops';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativePops',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPopsPostAsync
     *
     * Create a new Pops Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Pops (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsPostAsync($body)
    {
        return $this->creativesPopsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPopsPostAsyncWithHttpInfo
     *
     * Create a new Pops Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Pops (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPopsPostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativePops';
        $request = $this->creativesPopsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPopsPost'
     *
     * @param  \OpenAPI\Client\Model\NewCreativePops $body Created Creative Pops (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPopsPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesPopsPost'
            );
        }

        $resourcePath = '/creatives/pops';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPushCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesPushCreativeIdDelete($creative_id)
    {
        $this->creativesPushCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesPushCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPushCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesPushCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPushCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesPushCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPushCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesPushCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPushCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPushCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPushCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/push/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPushCreativeIdGet
     *
     * Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006Data
     */
    public function creativesPushCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesPushCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesPushCreativeIdGetWithHttpInfo
     *
     * Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPushCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesPushCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2006Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPushCreativeIdGetAsync
     *
     * Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdGetAsync($creative_id)
    {
        return $this->creativesPushCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPushCreativeIdGetAsyncWithHttpInfo
     *
     * Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
        $request = $this->creativesPushCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPushCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPushCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPushCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/push/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPushCreativeIdPut
     *
     * Update a Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006Data
     */
    public function creativesPushCreativeIdPut($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        list($response) = $this->creativesPushCreativeIdPutWithHttpInfo($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);
        return $response;
    }

    /**
     * Operation creativesPushCreativeIdPutWithHttpInfo
     *
     * Update a Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPushCreativeIdPutWithHttpInfo($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        $request = $this->creativesPushCreativeIdPutRequest($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2006Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPushCreativeIdPutAsync
     *
     * Update a Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdPutAsync($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        return $this->creativesPushCreativeIdPutAsyncWithHttpInfo($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPushCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Push Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushCreativeIdPutAsyncWithHttpInfo($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
        $request = $this->creativesPushCreativeIdPutRequest($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPushCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPushCreativeIdPutRequest($creative_id, $name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesPushCreativeIdPut'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling creativesPushCreativeIdPut'
            );
        }
        if ($name > 255) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesPushCreativeIdPut, must be smaller than or equal to 255.');
        }
        if ($name < 1) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesPushCreativeIdPut, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling creativesPushCreativeIdPut'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling creativesPushCreativeIdPut'
            );
        }
        // verify the required parameter 'headline' is set
        if ($headline === null || (is_array($headline) && count($headline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headline when calling creativesPushCreativeIdPut'
            );
        }
        if ($headline > 65) {
            throw new \InvalidArgumentException('invalid value for "$headline" when calling CreativesApi.creativesPushCreativeIdPut, must be smaller than or equal to 65.');
        }

        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling creativesPushCreativeIdPut'
            );
        }
        if ($description > 255) {
            throw new \InvalidArgumentException('invalid value for "$description" when calling CreativesApi.creativesPushCreativeIdPut, must be smaller than or equal to 255.');
        }

        // verify the required parameter 'destination_url' is set
        if ($destination_url === null || (is_array($destination_url) && count($destination_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_url when calling creativesPushCreativeIdPut'
            );
        }
        if ($destination_url > 4096) {
            throw new \InvalidArgumentException('invalid value for "$destination_url" when calling CreativesApi.creativesPushCreativeIdPut, must be smaller than or equal to 4096.');
        }

        // verify the required parameter 'image_attachment' is set
        if ($image_attachment === null || (is_array($image_attachment) && count($image_attachment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment when calling creativesPushCreativeIdPut'
            );
        }
        // verify the required parameter 'image_attachment_logo' is set
        if ($image_attachment_logo === null || (is_array($image_attachment_logo) && count($image_attachment_logo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment_logo when calling creativesPushCreativeIdPut'
            );
        }
        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesPushCreativeIdPut, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/push/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($headline !== null) {
            $formParams['headline'] = ObjectSerializer::toFormValue($headline);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($image_attachment_logo !== null) {
            $multipart = true;
            $formParams['image_attachment_logo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment_logo), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPushGet
     *
     * All Push Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006
     */
    public function creativesPushGet($limit, $offset)
    {
        list($response) = $this->creativesPushGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesPushGetWithHttpInfo
     *
     * All Push Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPushGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesPushGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPushGetAsync
     *
     * All Push Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushGetAsync($limit, $offset)
    {
        return $this->creativesPushGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPushGetAsyncWithHttpInfo
     *
     * All Push Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
        $request = $this->creativesPushGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPushGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPushGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesPushGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesPushGet'
            );
        }

        $resourcePath = '/creatives/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesPushPost
     *
     * Create a new Push Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006Data
     */
    public function creativesPushPost($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        list($response) = $this->creativesPushPostWithHttpInfo($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);
        return $response;
    }

    /**
     * Operation creativesPushPostWithHttpInfo
     *
     * Create a new Push Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesPushPostWithHttpInfo($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        $request = $this->creativesPushPostRequest($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\InlineResponse2006Data' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesPushPostAsync
     *
     * Create a new Push Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushPostAsync($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        return $this->creativesPushPostAsyncWithHttpInfo($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesPushPostAsyncWithHttpInfo
     *
     * Create a new Push Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesPushPostAsyncWithHttpInfo($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006Data';
        $request = $this->creativesPushPostRequest($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesPushPost'
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  string $headline Headline (required)
     * @param  string $description Description (required)
     * @param  string $destination_url Click-through URL. For example http://example.com (required)
     * @param  \SplFileObject $image_attachment Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  \SplFileObject $image_attachment_logo Logo Image to upload. Only &#39;.png, .jpg, .jpeg&#39; is allowed (required)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesPushPostRequest($name, $user_id, $active, $headline, $description, $destination_url, $image_attachment, $image_attachment_logo, $macros_custom_data = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling creativesPushPost'
            );
        }
        if ($name > 255) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesPushPost, must be smaller than or equal to 255.');
        }
        if ($name < 1) {
            throw new \InvalidArgumentException('invalid value for "$name" when calling CreativesApi.creativesPushPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling creativesPushPost'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling creativesPushPost'
            );
        }
        // verify the required parameter 'headline' is set
        if ($headline === null || (is_array($headline) && count($headline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headline when calling creativesPushPost'
            );
        }
        if ($headline > 65) {
            throw new \InvalidArgumentException('invalid value for "$headline" when calling CreativesApi.creativesPushPost, must be smaller than or equal to 65.');
        }

        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling creativesPushPost'
            );
        }
        if ($description > 255) {
            throw new \InvalidArgumentException('invalid value for "$description" when calling CreativesApi.creativesPushPost, must be smaller than or equal to 255.');
        }

        // verify the required parameter 'destination_url' is set
        if ($destination_url === null || (is_array($destination_url) && count($destination_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_url when calling creativesPushPost'
            );
        }
        if ($destination_url > 4096) {
            throw new \InvalidArgumentException('invalid value for "$destination_url" when calling CreativesApi.creativesPushPost, must be smaller than or equal to 4096.');
        }

        // verify the required parameter 'image_attachment' is set
        if ($image_attachment === null || (is_array($image_attachment) && count($image_attachment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment when calling creativesPushPost'
            );
        }
        // verify the required parameter 'image_attachment_logo' is set
        if ($image_attachment_logo === null || (is_array($image_attachment_logo) && count($image_attachment_logo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_attachment_logo when calling creativesPushPost'
            );
        }
        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesPushPost, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($headline !== null) {
            $formParams['headline'] = ObjectSerializer::toFormValue($headline);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($destination_url !== null) {
            $formParams['destination_url'] = ObjectSerializer::toFormValue($destination_url);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($image_attachment !== null) {
            $multipart = true;
            $formParams['image_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment), 'rb');
        }
        // form params
        if ($image_attachment_logo !== null) {
            $multipart = true;
            $formParams['image_attachment_logo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image_attachment_logo), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo1pasCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesVideo1pasCreativeIdDelete($creative_id)
    {
        $this->creativesVideo1pasCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesVideo1pasCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo1pasCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesVideo1pasCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo1pasCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesVideo1pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo1pasCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesVideo1pasCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo1pasCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo1pasCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo1pasCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/video/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo1pasCreativeIdGet
     *
     * 1PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeVideo1pas
     */
    public function creativesVideo1pasCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesVideo1pasCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesVideo1pasCreativeIdGetWithHttpInfo
     *
     * 1PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeVideo1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo1pasCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesVideo1pasCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeVideo1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeVideo1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeVideo1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeVideo1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo1pasCreativeIdGetAsync
     *
     * 1PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdGetAsync($creative_id)
    {
        return $this->creativesVideo1pasCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo1pasCreativeIdGetAsyncWithHttpInfo
     *
     * 1PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeVideo1pas';
        $request = $this->creativesVideo1pasCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo1pasCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo1pasCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo1pasCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/video/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo1pasCreativeIdPut
     *
     * Update a Video 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (optional)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesVideo1pas
     */
    public function creativesVideo1pasCreativeIdPut($creative_id, $name = null, $active = null, $video_attachment = null, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        list($response) = $this->creativesVideo1pasCreativeIdPutWithHttpInfo($creative_id, $name, $active, $video_attachment, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);
        return $response;
    }

    /**
     * Operation creativesVideo1pasCreativeIdPutWithHttpInfo
     *
     * Update a Video 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (optional)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesVideo1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo1pasCreativeIdPutWithHttpInfo($creative_id, $name = null, $active = null, $video_attachment = null, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        $request = $this->creativesVideo1pasCreativeIdPutRequest($creative_id, $name, $active, $video_attachment, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativesVideo1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesVideo1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesVideo1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesVideo1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo1pasCreativeIdPutAsync
     *
     * Update a Video 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (optional)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdPutAsync($creative_id, $name = null, $active = null, $video_attachment = null, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        return $this->creativesVideo1pasCreativeIdPutAsyncWithHttpInfo($creative_id, $name, $active, $video_attachment, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo1pasCreativeIdPutAsyncWithHttpInfo
     *
     * Update a Video 1pas Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (optional)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasCreativeIdPutAsyncWithHttpInfo($creative_id, $name = null, $active = null, $video_attachment = null, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesVideo1pas';
        $request = $this->creativesVideo1pasCreativeIdPutRequest($creative_id, $name, $active, $video_attachment, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo1pasCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  string $name Creative Name (optional)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (optional)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (optional)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo1pasCreativeIdPutRequest($creative_id, $name = null, $active = null, $video_attachment = null, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo1pasCreativeIdPut'
            );
        }
        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesVideo1pasCreativeIdPut, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/video/1pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($video_attachment !== null) {
            $multipart = true;
            $formParams['video_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($video_attachment), 'rb');
        }
        // form params
        if ($video_clickthrough !== null) {
            $formParams['video_clickthrough'] = ObjectSerializer::toFormValue($video_clickthrough);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($is_skippable !== null) {
            $formParams['is_skippable'] = ObjectSerializer::toFormValue($is_skippable);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo1pasGet
     *
     * All 1PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesVideo1pas
     */
    public function creativesVideo1pasGet($limit, $offset)
    {
        list($response) = $this->creativesVideo1pasGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesVideo1pasGetWithHttpInfo
     *
     * All 1PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesVideo1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo1pasGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesVideo1pasGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesVideo1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesVideo1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesVideo1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesVideo1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo1pasGetAsync
     *
     * All 1PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasGetAsync($limit, $offset)
    {
        return $this->creativesVideo1pasGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo1pasGetAsyncWithHttpInfo
     *
     * All 1PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesVideo1pas';
        $request = $this->creativesVideo1pasGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo1pasGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo1pasGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesVideo1pasGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesVideo1pasGet'
            );
        }

        $resourcePath = '/creatives/video/1pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo1pasPost
     *
     * Create a new Video 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeVideo1pas
     */
    public function creativesVideo1pasPost($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        list($response) = $this->creativesVideo1pasPostWithHttpInfo($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);
        return $response;
    }

    /**
     * Operation creativesVideo1pasPostWithHttpInfo
     *
     * Create a new Video 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeVideo1pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo1pasPostWithHttpInfo($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        $request = $this->creativesVideo1pasPostRequest($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativeVideo1pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeVideo1pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeVideo1pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeVideo1pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo1pasPostAsync
     *
     * Create a new Video 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasPostAsync($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        return $this->creativesVideo1pasPostAsyncWithHttpInfo($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo1pasPostAsyncWithHttpInfo
     *
     * Create a new Video 1pas Creative
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo1pasPostAsyncWithHttpInfo($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeVideo1pas';
        $request = $this->creativesVideo1pasPostRequest($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough, $macros_custom_data, $is_skippable, $iab_attr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo1pasPost'
     *
     * @param  string $name Creative Name (required)
     * @param  float $user_id User ID (required)
     * @param  float $active Status. 1 - Active, 0 - Pause. Required. One of the ID values of parameter &#x60;statuses&#x60; in /constants is added to this parameter. (required)
     * @param  \SplFileObject $video_attachment Video to upload. Only &#39;.flv, .mp4, .avi, .wmv, .mov&#39; is allowed (required)
     * @param  string $adomain Advertiser Domain (required)
     * @param  string $video_clickthrough Video Clickthrough (optional)
     * @param  string $macros_custom_data You can pass this data upon impression using the [CREATIVE_CUSTOM_DATA] macro. (optional)
     * @param  float $is_skippable VAST 2.0 skip tracker (1 - True, 0 - False). (optional)
     * @param  float[] $iab_attr Creative Attributes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo1pasPostRequest($name, $user_id, $active, $video_attachment, $adomain, $video_clickthrough = null, $macros_custom_data = null, $is_skippable = null, $iab_attr = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling creativesVideo1pasPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling creativesVideo1pasPost'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling creativesVideo1pasPost'
            );
        }
        // verify the required parameter 'video_attachment' is set
        if ($video_attachment === null || (is_array($video_attachment) && count($video_attachment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $video_attachment when calling creativesVideo1pasPost'
            );
        }
        // verify the required parameter 'adomain' is set
        if ($adomain === null || (is_array($adomain) && count($adomain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adomain when calling creativesVideo1pasPost'
            );
        }
        if ($macros_custom_data !== null && strlen($macros_custom_data) > 500) {
            throw new \InvalidArgumentException('invalid length for "$macros_custom_data" when calling CreativesApi.creativesVideo1pasPost, must be smaller than or equal to 500.');
        }


        $resourcePath = '/creatives/video/1pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($video_attachment !== null) {
            $multipart = true;
            $formParams['video_attachment'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($video_attachment), 'rb');
        }
        // form params
        if ($adomain !== null) {
            $formParams['adomain'] = ObjectSerializer::toFormValue($adomain);
        }
        // form params
        if ($video_clickthrough !== null) {
            $formParams['video_clickthrough'] = ObjectSerializer::toFormValue($video_clickthrough);
        }
        // form params
        if ($macros_custom_data !== null) {
            $formParams['macros_custom_data'] = ObjectSerializer::toFormValue($macros_custom_data);
        }
        // form params
        if ($is_skippable !== null) {
            $formParams['is_skippable'] = ObjectSerializer::toFormValue($is_skippable);
        }
        // form params
        if ($iab_attr !== null) {
            $formParams['iab_attr[]'] = ObjectSerializer::toFormValue($iab_attr);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo3pasCreativeIdDelete
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function creativesVideo3pasCreativeIdDelete($creative_id)
    {
        $this->creativesVideo3pasCreativeIdDeleteWithHttpInfo($creative_id);
    }

    /**
     * Operation creativesVideo3pasCreativeIdDeleteWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo3pasCreativeIdDeleteWithHttpInfo($creative_id)
    {
        $request = $this->creativesVideo3pasCreativeIdDeleteRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo3pasCreativeIdDeleteAsync
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdDeleteAsync($creative_id)
    {
        return $this->creativesVideo3pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo3pasCreativeIdDeleteAsyncWithHttpInfo
     *
     * Delete Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdDeleteAsyncWithHttpInfo($creative_id)
    {
        $returnType = '';
        $request = $this->creativesVideo3pasCreativeIdDeleteRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo3pasCreativeIdDelete'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo3pasCreativeIdDeleteRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo3pasCreativeIdDelete'
            );
        }

        $resourcePath = '/creatives/video/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo3pasCreativeIdGet
     *
     * 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativeVideo3pas
     */
    public function creativesVideo3pasCreativeIdGet($creative_id)
    {
        list($response) = $this->creativesVideo3pasCreativeIdGetWithHttpInfo($creative_id);
        return $response;
    }

    /**
     * Operation creativesVideo3pasCreativeIdGetWithHttpInfo
     *
     * 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativeVideo3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo3pasCreativeIdGetWithHttpInfo($creative_id)
    {
        $request = $this->creativesVideo3pasCreativeIdGetRequest($creative_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativeVideo3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativeVideo3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativeVideo3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativeVideo3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo3pasCreativeIdGetAsync
     *
     * 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdGetAsync($creative_id)
    {
        return $this->creativesVideo3pasCreativeIdGetAsyncWithHttpInfo($creative_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo3pasCreativeIdGetAsyncWithHttpInfo
     *
     * 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdGetAsyncWithHttpInfo($creative_id)
    {
        $returnType = '\OpenAPI\Client\Model\CreativeVideo3pas';
        $request = $this->creativesVideo3pasCreativeIdGetRequest($creative_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo3pasCreativeIdGet'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo3pasCreativeIdGetRequest($creative_id)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo3pasCreativeIdGet'
            );
        }

        $resourcePath = '/creatives/video/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo3pasCreativeIdPut
     *
     * Update 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeVideo3pas $body Updated 3PAS Video Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesVideo3pas
     */
    public function creativesVideo3pasCreativeIdPut($creative_id, $body)
    {
        list($response) = $this->creativesVideo3pasCreativeIdPutWithHttpInfo($creative_id, $body);
        return $response;
    }

    /**
     * Operation creativesVideo3pasCreativeIdPutWithHttpInfo
     *
     * Update 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeVideo3pas $body Updated 3PAS Video Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesVideo3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo3pasCreativeIdPutWithHttpInfo($creative_id, $body)
    {
        $request = $this->creativesVideo3pasCreativeIdPutRequest($creative_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesVideo3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesVideo3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesVideo3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo3pasCreativeIdPutAsync
     *
     * Update 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeVideo3pas $body Updated 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdPutAsync($creative_id, $body)
    {
        return $this->creativesVideo3pasCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo3pasCreativeIdPutAsyncWithHttpInfo
     *
     * Update 3PAS Video Creative
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeVideo3pas $body Updated 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasCreativeIdPutAsyncWithHttpInfo($creative_id, $body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
        $request = $this->creativesVideo3pasCreativeIdPutRequest($creative_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo3pasCreativeIdPut'
     *
     * @param  float $creative_id The numerical ID of Creative (required)
     * @param  \OpenAPI\Client\Model\EditCreativeVideo3pas $body Updated 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo3pasCreativeIdPutRequest($creative_id, $body)
    {
        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling creativesVideo3pasCreativeIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesVideo3pasCreativeIdPut'
            );
        }

        $resourcePath = '/creatives/video/3pas/{creative_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative_id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo3pasGet
     *
     * All 3PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesVideo3pas
     */
    public function creativesVideo3pasGet($limit, $offset)
    {
        list($response) = $this->creativesVideo3pasGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesVideo3pasGetWithHttpInfo
     *
     * All 3PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesVideo3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo3pasGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesVideo3pasGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreativesVideo3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesVideo3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesVideo3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo3pasGetAsync
     *
     * All 3PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasGetAsync($limit, $offset)
    {
        return $this->creativesVideo3pasGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo3pasGetAsyncWithHttpInfo
     *
     * All 3PAS Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
        $request = $this->creativesVideo3pasGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo3pasGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo3pasGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesVideo3pasGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesVideo3pasGet'
            );
        }

        $resourcePath = '/creatives/video/3pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideo3pasPost
     *
     * Create 3PAS Video Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeVideo3pas $body Created 3PAS Video Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreativesVideo3pas
     */
    public function creativesVideo3pasPost($body)
    {
        list($response) = $this->creativesVideo3pasPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation creativesVideo3pasPostWithHttpInfo
     *
     * Create 3PAS Video Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeVideo3pas $body Created 3PAS Video Creative object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreativesVideo3pas, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideo3pasPostWithHttpInfo($body)
    {
        $request = $this->creativesVideo3pasPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreativesVideo3pas' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreativesVideo3pas', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreativesVideo3pas',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideo3pasPostAsync
     *
     * Create 3PAS Video Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeVideo3pas $body Created 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasPostAsync($body)
    {
        return $this->creativesVideo3pasPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideo3pasPostAsyncWithHttpInfo
     *
     * Create 3PAS Video Creative
     *
     * @param  \OpenAPI\Client\Model\NewCreativeVideo3pas $body Created 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideo3pasPostAsyncWithHttpInfo($body)
    {
        $returnType = '\OpenAPI\Client\Model\CreativesVideo3pas';
        $request = $this->creativesVideo3pasPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideo3pasPost'
     *
     * @param  \OpenAPI\Client\Model\NewCreativeVideo3pas $body Created 3PAS Video Creative object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideo3pasPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creativesVideo3pasPost'
            );
        }

        $resourcePath = '/creatives/video/3pas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creativesVideoGet
     *
     * All Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Creatives
     */
    public function creativesVideoGet($limit, $offset)
    {
        list($response) = $this->creativesVideoGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation creativesVideoGetWithHttpInfo
     *
     * All Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Creatives, HTTP status code, HTTP response headers (array of strings)
     */
    public function creativesVideoGetWithHttpInfo($limit, $offset)
    {
        $request = $this->creativesVideoGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Creatives' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Creatives', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Creatives';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Creatives',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creativesVideoGetAsync
     *
     * All Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideoGetAsync($limit, $offset)
    {
        return $this->creativesVideoGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creativesVideoGetAsyncWithHttpInfo
     *
     * All Video Creatives
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creativesVideoGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\Creatives';
        $request = $this->creativesVideoGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creativesVideoGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creativesVideoGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling creativesVideoGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling creativesVideoGet'
            );
        }

        $resourcePath = '/creatives/video';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * OrganizationsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PLATFORM.IO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation organizationsGet
     *
     * Organizations. **Only for Root**
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Organizations
     */
    public function organizationsGet($limit, $offset)
    {
        list($response) = $this->organizationsGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation organizationsGetWithHttpInfo
     *
     * Organizations. **Only for Root**
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Organizations, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsGetWithHttpInfo($limit, $offset)
    {
        $request = $this->organizationsGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Organizations' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Organizations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Organizations';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Organizations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsGetAsync
     *
     * Organizations. **Only for Root**
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsGetAsync($limit, $offset)
    {
        return $this->organizationsGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsGetAsyncWithHttpInfo
     *
     * Organizations. **Only for Root**
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsGetAsyncWithHttpInfo($limit, $offset)
    {
        $returnType = '\OpenAPI\Client\Model\Organizations';
        $request = $this->organizationsGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsGet'
     *
     * @param  string $limit Limit (required)
     * @param  string $offset Offset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsGetRequest($limit, $offset)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling organizationsGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling organizationsGet'
            );
        }

        $resourcePath = '/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Advertiser
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet($organization_id, $agency_id, $advertiser_id)
    {
        list($response) = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetWithHttpInfo($organization_id, $agency_id, $advertiser_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetWithHttpInfo
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Advertiser, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetWithHttpInfo($organization_id, $agency_id, $advertiser_id)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetRequest($organization_id, $agency_id, $advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Advertiser' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Advertiser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Advertiser';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Advertiser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetAsync
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetAsync($organization_id, $agency_id, $advertiser_id)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetAsyncWithHttpInfo
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id)
    {
        $returnType = '\OpenAPI\Client\Model\Advertiser';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetRequest($organization_id, $agency_id, $advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGetRequest($organization_id, $agency_id, $advertiser_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers/{advertiser_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }
        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser_id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut
     *
     * Update Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Updated Advertiser object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut($organization_id, $agency_id, $advertiser_id, $body)
    {
        $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutWithHttpInfo
     *
     * Update Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Updated Advertiser object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutRequest($organization_id, $agency_id, $advertiser_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutAsync
     *
     * Update Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Updated Advertiser object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutAsync($organization_id, $agency_id, $advertiser_id, $body)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutAsyncWithHttpInfo
     *
     * Update Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Updated Advertiser object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutRequest($organization_id, $agency_id, $advertiser_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Updated Advertiser object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPutRequest($organization_id, $agency_id, $advertiser_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdPut'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers/{advertiser_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }
        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser_id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet
     *
     * Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float[]
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet($organization_id, $agency_id, $advertiser_id)
    {
        list($response) = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetWithHttpInfo($organization_id, $agency_id, $advertiser_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetWithHttpInfo
     *
     * Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float[], HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetWithHttpInfo($organization_id, $agency_id, $advertiser_id)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetRequest($organization_id, $agency_id, $advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('float[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetAsync
     *
     * Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetAsync($organization_id, $agency_id, $advertiser_id)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetAsyncWithHttpInfo
     *
     * Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id)
    {
        $returnType = 'float[]';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetRequest($organization_id, $agency_id, $advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGetRequest($organization_id, $agency_id, $advertiser_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers/{advertiser_id}/ssps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }
        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser_id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut
     *
     * Update Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  float[] $body Updated SSP object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut($organization_id, $agency_id, $advertiser_id, $body)
    {
        $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutWithHttpInfo
     *
     * Update Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  float[] $body Updated SSP object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutRequest($organization_id, $agency_id, $advertiser_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutAsync
     *
     * Update Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  float[] $body Updated SSP object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutAsync($organization_id, $agency_id, $advertiser_id, $body)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutAsyncWithHttpInfo
     *
     * Update Advertiser Locked SSP. Only For Admins.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  float[] $body Updated SSP object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutAsyncWithHttpInfo($organization_id, $agency_id, $advertiser_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutRequest($organization_id, $agency_id, $advertiser_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  float $advertiser_id The numerical ID of Advertiser (required)
     * @param  float[] $body Updated SSP object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPutRequest($organization_id, $agency_id, $advertiser_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut'
            );
        }
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersAdvertiserIdSspsPut'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers/{advertiser_id}/ssps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }
        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser_id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersGet
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Advertisers
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersGet($organization_id, $agency_id)
    {
        list($response) = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetWithHttpInfo($organization_id, $agency_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetWithHttpInfo
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Advertisers, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetWithHttpInfo($organization_id, $agency_id)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetRequest($organization_id, $agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Advertisers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Advertisers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Advertisers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Advertisers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetAsync
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetAsync($organization_id, $agency_id)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetAsyncWithHttpInfo($organization_id, $agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetAsyncWithHttpInfo
     *
     * Advertisers.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetAsyncWithHttpInfo($organization_id, $agency_id)
    {
        $returnType = '\OpenAPI\Client\Model\Advertisers';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetRequest($organization_id, $agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersGetRequest($organization_id, $agency_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersGet'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost
     *
     * Create Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Created Advertiser. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost($organization_id, $agency_id, $body)
    {
        $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostWithHttpInfo($organization_id, $agency_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostWithHttpInfo
     *
     * Create Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Created Advertiser. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostWithHttpInfo($organization_id, $agency_id, $body)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostRequest($organization_id, $agency_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostAsync
     *
     * Create Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Created Advertiser. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostAsync($organization_id, $agency_id, $body)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostAsyncWithHttpInfo($organization_id, $agency_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostAsyncWithHttpInfo
     *
     * Create Advertiser.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Created Advertiser. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostAsyncWithHttpInfo($organization_id, $agency_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostRequest($organization_id, $agency_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAdvertiser $body Created Advertiser. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdAdvertisersPostRequest($organization_id, $agency_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdAgenciesAgencyIdAdvertisersPost'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}/advertisers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdGet
     *
     * Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Agency
     */
    public function organizationsOrganizationIdAgenciesAgencyIdGet($organization_id, $agency_id)
    {
        list($response) = $this->organizationsOrganizationIdAgenciesAgencyIdGetWithHttpInfo($organization_id, $agency_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdGetWithHttpInfo
     *
     * Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Agency, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdGetWithHttpInfo($organization_id, $agency_id)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdGetRequest($organization_id, $agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Agency' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Agency', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Agency';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Agency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdGetAsync
     *
     * Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdGetAsync($organization_id, $agency_id)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdGetAsyncWithHttpInfo($organization_id, $agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdGetAsyncWithHttpInfo
     *
     * Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdGetAsyncWithHttpInfo($organization_id, $agency_id)
    {
        $returnType = '\OpenAPI\Client\Model\Agency';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdGetRequest($organization_id, $agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdGetRequest($organization_id, $agency_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdGet'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdPut
     *
     * Update Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Updated Organization object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdAgenciesAgencyIdPut($organization_id, $agency_id, $body)
    {
        $this->organizationsOrganizationIdAgenciesAgencyIdPutWithHttpInfo($organization_id, $agency_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdPutWithHttpInfo
     *
     * Update Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Updated Organization object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesAgencyIdPutWithHttpInfo($organization_id, $agency_id, $body)
    {
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdPutRequest($organization_id, $agency_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdPutAsync
     *
     * Update Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdPutAsync($organization_id, $agency_id, $body)
    {
        return $this->organizationsOrganizationIdAgenciesAgencyIdPutAsyncWithHttpInfo($organization_id, $agency_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesAgencyIdPutAsyncWithHttpInfo
     *
     * Update Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesAgencyIdPutAsyncWithHttpInfo($organization_id, $agency_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdAgenciesAgencyIdPutRequest($organization_id, $agency_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesAgencyIdPut'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  float $agency_id The numerical ID of Agency (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesAgencyIdPutRequest($organization_id, $agency_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesAgencyIdPut'
            );
        }
        // verify the required parameter 'agency_id' is set
        if ($agency_id === null || (is_array($agency_id) && count($agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agency_id when calling organizationsOrganizationIdAgenciesAgencyIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdAgenciesAgencyIdPut'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies/{agency_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'agency_id' . '}',
                ObjectSerializer::toPathValue($agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesGet
     *
     * Organization agencies.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Agencies
     */
    public function organizationsOrganizationIdAgenciesGet($organization_id)
    {
        list($response) = $this->organizationsOrganizationIdAgenciesGetWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdAgenciesGetWithHttpInfo
     *
     * Organization agencies.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Agencies, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesGetWithHttpInfo($organization_id)
    {
        $request = $this->organizationsOrganizationIdAgenciesGetRequest($organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Agencies' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Agencies', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Agencies';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Agencies',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesGetAsync
     *
     * Organization agencies.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesGetAsync($organization_id)
    {
        return $this->organizationsOrganizationIdAgenciesGetAsyncWithHttpInfo($organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesGetAsyncWithHttpInfo
     *
     * Organization agencies.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesGetAsyncWithHttpInfo($organization_id)
    {
        $returnType = '\OpenAPI\Client\Model\Agencies';
        $request = $this->organizationsOrganizationIdAgenciesGetRequest($organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesGetRequest($organization_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesPost
     *
     * Create Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Created Agency. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdAgenciesPost($organization_id, $body)
    {
        $this->organizationsOrganizationIdAgenciesPostWithHttpInfo($organization_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdAgenciesPostWithHttpInfo
     *
     * Create Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Created Agency. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdAgenciesPostWithHttpInfo($organization_id, $body)
    {
        $request = $this->organizationsOrganizationIdAgenciesPostRequest($organization_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdAgenciesPostAsync
     *
     * Create Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Created Agency. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesPostAsync($organization_id, $body)
    {
        return $this->organizationsOrganizationIdAgenciesPostAsyncWithHttpInfo($organization_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdAgenciesPostAsyncWithHttpInfo
     *
     * Create Agency.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Created Agency. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdAgenciesPostAsyncWithHttpInfo($organization_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdAgenciesPostRequest($organization_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdAgenciesPost'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewAgency $body Created Agency. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdAgenciesPostRequest($organization_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdAgenciesPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdAgenciesPost'
            );
        }

        $resourcePath = '/organizations/{organization_id}/agencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdGet
     *
     * Organization. **Only for Admins**
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Organization
     */
    public function organizationsOrganizationIdGet($organization_id)
    {
        list($response) = $this->organizationsOrganizationIdGetWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation organizationsOrganizationIdGetWithHttpInfo
     *
     * Organization. **Only for Admins**
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Organization, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdGetWithHttpInfo($organization_id)
    {
        $request = $this->organizationsOrganizationIdGetRequest($organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Organization' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Organization', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Organization';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Organization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdGetAsync
     *
     * Organization. **Only for Admins**
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdGetAsync($organization_id)
    {
        return $this->organizationsOrganizationIdGetAsyncWithHttpInfo($organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdGetAsyncWithHttpInfo
     *
     * Organization. **Only for Admins**
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdGetAsyncWithHttpInfo($organization_id)
    {
        $returnType = '\OpenAPI\Client\Model\Organization';
        $request = $this->organizationsOrganizationIdGetRequest($organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdGet'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdGetRequest($organization_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdGet'
            );
        }

        $resourcePath = '/organizations/{organization_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrganizationIdPut
     *
     * Update Organization. Only for Root.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewOrganization $body Updated Organization object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsOrganizationIdPut($organization_id, $body)
    {
        $this->organizationsOrganizationIdPutWithHttpInfo($organization_id, $body);
    }

    /**
     * Operation organizationsOrganizationIdPutWithHttpInfo
     *
     * Update Organization. Only for Root.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewOrganization $body Updated Organization object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrganizationIdPutWithHttpInfo($organization_id, $body)
    {
        $request = $this->organizationsOrganizationIdPutRequest($organization_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrganizationIdPutAsync
     *
     * Update Organization. Only for Root.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewOrganization $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdPutAsync($organization_id, $body)
    {
        return $this->organizationsOrganizationIdPutAsyncWithHttpInfo($organization_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrganizationIdPutAsyncWithHttpInfo
     *
     * Update Organization. Only for Root.
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewOrganization $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrganizationIdPutAsyncWithHttpInfo($organization_id, $body)
    {
        $returnType = '';
        $request = $this->organizationsOrganizationIdPutRequest($organization_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrganizationIdPut'
     *
     * @param  float $organization_id The numerical ID of Organization (required)
     * @param  \OpenAPI\Client\Model\NewOrganization $body Updated Organization object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsOrganizationIdPutRequest($organization_id, $body)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling organizationsOrganizationIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsOrganizationIdPut'
            );
        }

        $resourcePath = '/organizations/{organization_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organization_id' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsPost
     *
     * Create Organization. **Only For Root**
     *
     * @param  \OpenAPI\Client\Model\NewOrganization $body Created Organization. **Only For Root** (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function organizationsPost($body)
    {
        $this->organizationsPostWithHttpInfo($body);
    }

    /**
     * Operation organizationsPostWithHttpInfo
     *
     * Create Organization. **Only For Root**
     *
     * @param  \OpenAPI\Client\Model\NewOrganization $body Created Organization. **Only For Root** (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsPostWithHttpInfo($body)
    {
        $request = $this->organizationsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsPostAsync
     *
     * Create Organization. **Only For Root**
     *
     * @param  \OpenAPI\Client\Model\NewOrganization $body Created Organization. **Only For Root** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsPostAsync($body)
    {
        return $this->organizationsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsPostAsyncWithHttpInfo
     *
     * Create Organization. **Only For Root**
     *
     * @param  \OpenAPI\Client\Model\NewOrganization $body Created Organization. **Only For Root** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsPostAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->organizationsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsPost'
     *
     * @param  \OpenAPI\Client\Model\NewOrganization $body Created Organization. **Only For Root** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organizationsPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling organizationsPost'
            );
        }

        $resourcePath = '/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
